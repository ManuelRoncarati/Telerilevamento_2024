#PER OGNI ANNATA, STACK DELLA SIHOUETTE. KMEASN E HCLUST MODIFICABILE

# Caricamento delle librerie necessarie
library(kohonen)      # Per la Self-Organizing Map
library(cluster)      # Per kmeans(), silhouette(), hclust(), cutree()
library(factoextra)   # Per fviz_silhouette()
library(ggplot2)      # Per ggtheme() e ggplot
library(gridExtra)    # Per grid.arrange() e tableGrob()
library(dplyr)        # Per operazioni sui data frame
library(tools)        # Per file_path_sans_ext()
library(grid)         # Per grid.draw()

# Imposta la working directory
setwd("C:/PN_Sila")

# Imposta la cartella contenente i modelli SOM
som_folder <- "C:/PN_Sila/som_Sila/"

# Crea le cartelle di output nella working directory se non esistono
output_dir_km <- file.path("kmeans_plots")
if (!dir.exists(output_dir_km)) {
  dir.create(output_dir_km, recursive = TRUE)
}

output_dir_hc <- file.path("hclust_plots")
if (!dir.exists(output_dir_hc)) {
  dir.create(output_dir_hc, recursive = TRUE)
}

# Ottieni tutti i file .rds presenti nella cartella dei modelli SOM
som_files <- list.files(som_folder, pattern = "\\.rds$", full.names = TRUE)
if (length(som_files) == 0) {
  stop("Nessun file .rds trovato nella cartella!")
}

# Valori di K da testare
ks <- 3:6

###############################
## FUNZIONE AUSILIARIA per creare la tabella delle informazioni di silhouette
## La tabella include una colonna "Overall" e poi una colonna per ogni cluster.
## Le righe riportano "Avg Silhouette" e "Cluster Size".
###############################
creaTabellaSilinfo <- function(silinfo, cluster_sizes) {
  clusters <- names(silinfo$clus.avg.widths)
  overall_avg <- round(silinfo$avg.width, 3)
  total_size <- sum(cluster_sizes)
  
  df_info <- data.frame(
    Metric = c("Avg Silhouette", "Cluster Size"),
    Overall = c(overall_avg, total_size),
    stringsAsFactors = FALSE
  )
  
  for(cl in clusters) {
    avg_sil <- round(silinfo$clus.avg.widths[cl], 3)
    size_val <- cluster_sizes[as.numeric(cl)]
    df_info[[cl]] <- c(avg_sil, size_val)
  }
  rownames(df_info) <- df_info$Metric
  df_info$Metric <- NULL
  tableGrob(df_info, rows = rownames(df_info))
}

# Itera su tutti i file .rds nella cartella dei modelli SOM
for(som_file in som_files) {
  
  cat("Processando il file:", som_file, "\n")
  
  # Carica il modello SOM ed estrai i codici (centroidi)
  som_model <- readRDS(som_file)
  som_values <- som_model$codes[[1]]
  
  # Calcola la matrice delle distanze Euclidea (usata in entrambi gli algoritmi)
  dist_euclidean <- dist(som_values, method = "euclidean")
  
  ###############################
  ## 1. K-MEANS (distanza Euclidea)
  ###############################
  km_composite_list <- list()
  for (k in ks) {
    km.res <- kmeans(som_values, centers = k, iter.max = 100, nstart = 20)
    km.sil <- silhouette(km.res$cluster, dist_euclidean)
    
    p <- fviz_silhouette(km.sil, palette = "jco", 
                         ggtheme = theme_classic(), 
                         print.summary = FALSE) +
      ggtitle(paste("K-means (K =", k, ")"))
    
    silinfo <- list(
      avg.width = mean(km.sil[, "sil_width"]),
      clus.avg.widths = tapply(km.sil[, "sil_width"], km.res$cluster, mean)
    )
    
    tbl <- creaTabellaSilinfo(silinfo, km.res$size)
    
    composite <- grid.arrange(p, tbl, ncol = 1, heights = c(3, 1))
    km_composite_list[[paste0("K=", k)]] <- composite
  }
  
  final_km_plot <- grid.arrange(grobs = km_composite_list, ncol = 2,
                                top = paste("K-means: Silhouette Plots e Informazioni (K = 3-6)\n", basename(som_file)))
  
  ###############################
  ## 2. CLUSTERING GERARCHICO (Ward.D2)
  ###############################
  hc.res <- hclust(dist_euclidean, method = "ward.D2")
  hc_composite_list <- list()
  for (k in ks) {
    hc.clusters <- cutree(hc.res, k = k)
    hc.sil <- silhouette(hc.clusters, dist_euclidean)
    
    p <- fviz_silhouette(hc.sil, palette = "jco", 
                         ggtheme = theme_classic(), 
                         print.summary = FALSE) +
      ggtitle(paste("HClust (Ward.D2, K =", k, ")"))
    
    avg_width <- mean(hc.sil[, "sil_width"])
    clus_avg <- tapply(hc.sil[, "sil_width"], hc.clusters, mean)
    cluster_sizes <- as.numeric(table(hc.clusters))
    
    silinfo <- list(avg.width = avg_width, clus.avg.widths = clus_avg)
    
    tbl <- creaTabellaSilinfo(silinfo, cluster_sizes)
    
    composite <- grid.arrange(p, tbl, ncol = 1, heights = c(3, 1))
    hc_composite_list[[paste0("K=", k)]] <- composite
  }
  
  final_hc_plot <- grid.arrange(grobs = hc_composite_list, ncol = 2,
                                top = paste("HClust (Ward.D2): Silhouette Plots e Informazioni (K = 3-6)\n", basename(som_file)))
  
  ###############################
  ## Salvataggio dei grafici finali
  ###############################
  base_name <- file_path_sans_ext(basename(som_file))
  
  # Salva il grafico finale di K-means nella cartella dedicata
  png_filename_km <- file.path(output_dir_km, paste0(base_name, "_kmeans.png"))
  png(filename = png_filename_km, width = 1200, height = 800)
  grid::grid.draw(final_km_plot)
  dev.off()
  
  # Salva il grafico finale di HClust nella cartella dedicata
  png_filename_hc <- file.path(output_dir_hc, paste0(base_name, "_hclust.png"))
  png(filename = png_filename_hc, width = 1200, height = 800)
  grid::grid.draw(final_hc_plot)
  dev.off()
  
  cat("Plot K-means e HClust salvati per il file:", som_file, "\n")
}













#grafico kmeans hclust diverse distanze: # Caricamento delle librerie necessarie con linee in corrispondenza 4 e 5
library(kohonen)    # Per la Self-Organizing Map
library(cluster)    # Per silhouette() e funzioni di clustering
library(ggplot2)    # Per la creazione dei grafici
library(dplyr)      # Per operazioni sui data frame

# Definizione della cartella contenente i modelli SOM
som_folder <- "C:/PN_Sila/som_Sila/"

# Ottieni tutti i file .rds presenti nella cartella
som_files <- list.files(som_folder, pattern = "\\.rds$", full.names = TRUE)
if(length(som_files) == 0){
    stop("Nessun file .rds trovato nella cartella!")
}

# Parametri per il clustering
k_max    <- 10   # Numero massimo di cluster (da 2 a 10)
iter_max <- 100  # Numero massimo di iterazioni per kmeans
nstart   <- 50   # Numero di partizioni iniziali per kmeans

# Definiamo le funzioni per le metriche di dissimilarità per hclust
distance_methods <- list(
    euclidean  = function(x) dist(x, method = "euclidean"),
    maximum    = function(x) dist(x, method = "maximum"),
    manhattan  = function(x) dist(x, method = "manhattan"),
    canberra   = function(x) dist(x, method = "canberra"),
    binary     = function(x) dist(x, method = "binary"),
    minkowski  = function(x) dist(x, method = "minkowski", p = 3)
)

# Itera su tutti i file nella cartella
for(som_file in som_files){
    
    cat("Analizzando il file:", som_file, "\n")
    
    # Carica il modello SOM ed estrae i codici (centroidi)
    som_model <- readRDS(som_file)
    som_values <- som_model$codes[[1]]
    
    # Data frame per salvare i risultati: k, algoritmo, metrica di dissimilarità e ASW
    results <- data.frame(k = integer(), algorithm = character(), distance = character(), ASW = numeric(), 
                          stringsAsFactors = FALSE)
    
    # --- K-means (usa la distanza Euclidea) ---
    for(k in 2:k_max){
        km_fit <- kmeans(som_values, centers = k, iter.max = iter_max, nstart = nstart)
        # Calcola la matrice delle distanze Euclidea
        dist_mat <- dist(som_values, method = "euclidean")
        km_sil <- silhouette(km_fit$cluster, dist_mat)
        km_asw <- mean(km_sil[, "sil_width"])
        
        results <- rbind(results, data.frame(k = k, algorithm = "kmeans", distance = "euclidean", ASW = km_asw,
                                             stringsAsFactors = FALSE))
    }
    
    # --- Clustering gerarchico (hclust) per ciascuna metrica ---
    for(method_name in names(distance_methods)){
        dist_fun <- distance_methods[[method_name]]
        dist_mat <- dist_fun(som_values)
        for(k in 2:k_max){
            hc_fit <- hclust(dist_mat, method = "ward.D2")
            hc_clusters <- cutree(hc_fit, k = k)
            hc_sil <- silhouette(hc_clusters, dist_mat)
            hc_asw <- mean(hc_sil[, "sil_width"])
            
            results <- rbind(results, data.frame(k = k, algorithm = "hclust", distance = method_name, ASW = hc_asw,
                                                 stringsAsFactors = FALSE))
        }
    }
    
    # Aggiungiamo una colonna "method" per semplificare il grafico:
    results$method <- ifelse(results$algorithm == "kmeans", 
                             "kmeans (Euclidean)", 
                             paste("hclust (", results$distance, ")", sep = ""))
    
    # Costruiamo il grafico: ASW in funzione di k, con linee separate per ciascun metodo
    p <- ggplot(results, aes(x = k, y = ASW, color = method, group = method)) +
        geom_line(size = 1.2) +
        geom_point(size = 3) +
        # Aggiungiamo due linee verticali tratteggiate in corrispondenza di x=4 e x=5
        geom_vline(xintercept = 4, linetype = "dashed", color = "gray") +
        geom_vline(xintercept = 5, linetype = "dashed", color = "gray") +
        scale_x_continuous(breaks = 2:k_max) +
        labs(title = paste("Average Silhouette Width -", basename(som_file)),
             x = "Numero di Cluster (k)",
             y = "Average Silhouette Width (ASW)") +
        theme_minimal() +
        theme(plot.title = element_text(hjust = 0.5))
    
    print(p)
}

