# Carica le librerie necessarie
library(terra)
library(dplyr)
library(randomForest)
library(mapview)
library(viridis)
library(caret)
library(cluster)

# Imposta la directory di lavoro
setwd("C:/composite prove")

# Carica il raster multibanda
bande_selezionate <- rast("bande_selezionate.tif")

# Estrai i valori delle bande come dataframe
values_bande <- as.data.frame(values(bande_selezionate))

# Filtra solo i valori non nulli
non_na_mask <- complete.cases(values_bande)
values_bande_non_na <- values_bande[non_na_mask, ]

# Imposta una semina per la riproducibilitÃ 
set.seed(123)

# Numero di pixel da campionare
num_samples <- ceiling(nrow(values_bande_non_na) * 0.1)  # Esempio: 10% dei pixel

# Campiona i pixel casualmente
sample_indices <- sample(seq_len(nrow(values_bande_non_na)), size = num_samples, replace = FALSE)
sampled_data <- values_bande_non_na[sample_indices, ]

# Identifica le colonne delle bande
band_columns <- names(sampled_data)

# Prepara i dati per K-means
X_kmeans <- as.matrix(sampled_data %>% select(all_of(band_columns)))

# Applica K-means per creare cluster
num_clusters <- 4  # Cambia questo valore se necessario
kmeans_result <- kmeans(X_kmeans, centers = num_clusters, nstart = 15)

# Aggiungi le etichette dei cluster ai dati
sampled_data$classe <- kmeans_result$cluster - 1  # Le etichette devono partire da 0

# Prepara i dati di training
X_train <- as.data.frame(X_kmeans)
y_train <- as.factor(sampled_data$classe)  # Converti le etichette in un fattore
train_data <- cbind(X_train, classe = y_train)

# Ottimizza Random Forest con caret
tuneGrid <- expand.grid(.mtry = c(2, 4, 6, 8, 10))
control <- trainControl(method = "cv", number = 5)
rf_tune <- train(classe ~ ., data = train_data, method = "rf", tuneGrid = tuneGrid, trControl = control, ntree = 500)
print(rf_tune)
best_rf_model <- rf_tune$finalModel

# Carica il raster su cui effettuare le previsioni
values_bande_full <- as.data.frame(values(bande_selezionate))
values_bande_non_na_full <- values_bande_full[complete.cases(values_bande_full), ]
X_pred <- as.data.frame(values_bande_non_na_full)
names(X_pred) <- band_columns  # Assicurati che i nomi delle colonne corrispondano

# Effettua le previsioni
preds <- predict(best_rf_model, X_pred)

# Verifica che il numero di previsioni corrisponda ai valori non nulli
print(length(preds))  # Deve essere uguale a nrow(values_bande_non_na_full)

# Crea un raster vuoto con le stesse dimensioni e risoluzione del raster originale
pred_raster <- rast(nrow = nrow(bande_selezionate), ncol = ncol(bande_selezionate), crs = crs(bande_selezionate), ext = ext(bande_selezionate))

# Riempie il raster con le previsioni solo per i pixel non nulli
values(pred_raster) <- NA  # Inizialmente setta tutto a NA
values(pred_raster)[complete.cases(values_bande_full)] <- preds

# Visualizza il raster classificato utilizzando mapview
mapview(pred_raster, col.regions = magma(num_clusters), main = "Raster Classificato con Random Forest", maxpixels = ncell(pred_raster))
