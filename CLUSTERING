#HCLUST




# Carica le librerie necessarie
library(fpc)          # Per clusterboot
library(leaflet)
library(viridisLite)
library(raster)       # Per la gestione dei raster, se non già caricato

# Validazione della stabilità dei cluster con clusterboot
clusterboot_result <- clusterboot(
    data = som_values,                  # Usa i valori SOM
    B = 100,                            # Aumentato il numero di bootstrap
    clustermethod = hclustCBI,          # Metodo di clustering gerarchico personalizzato
    bootmethod = "boot",                # Bootstrap non parametrico
    dissolution = 0.5, 
    k = 5,
    method = 'ward.D2',                  # Metodo di clustering
    recover = 0.75, 
    count = FALSE
)

# Stampa i risultati della stabilità dei cluster
cat("Risultati della stabilità dei cluster con clusterboot:\n")
print(clusterboot_result$bootmean)
print(clusterboot_result$bootrecover)
print(clusterboot_result$bootbrd)

# Visualizzazione della stabilità
barplot(clusterboot_result$bootmean, 
        main = "Stabilità dei Cluster con hclust e Bootstrap", 
        ylab = "Media della Similarità di Jaccard", 
        xlab = "Cluster", 
        col = "lightblue",
        ylim = c(0,1))  # Aggiunto ylim per limitare l'asse y

# Esecuzione del clustering gerarchico definitivo
distance_matrix_full <- dist(som_values, method = "euclidean")
hc_full <- hclust(distance_matrix_full, method = "ward.D2")
cluster_assignments <- cutree(hc_full, k = optimal_clusters)

# Creazione del raster classificato
classified_raster_hclust <- img_84[[1]]
values(classified_raster_hclust) <- NA
mask <- !is.na(values(img_84[[1]]))
values(classified_raster_hclust)[mask] <- cluster_assignments[som_model$unit.classif]

# Seleziona solo la prima banda del raster
classified_raster_hclust_single <- classified_raster_hclust[[1]]

# Carica la palette turbo
palette_turbo <- viridisLite::turbo(optimal_clusters)

# Visualizzazione con Leaflet
leaflet() %>%
    addTiles(group = "OpenStreetMap") %>%
    addProviderTiles("Esri.WorldImagery", group = "Immagine Satellitare") %>%
    addProviderTiles("CartoDB.Positron", group = "Mappa Chiara") %>%
    addRasterImage(classified_raster_hclust_single, 
                   colors = palette_turbo, 
                   opacity = 0.6, 
                   group = "Classificato con hclust") %>%
    addLayersControl(
        baseGroups = c("OpenStreetMap", "Immagine Satellitare", "Mappa Chiara"),
        overlayGroups = c("Classificato con hclust"),
        options = layersControlOptions(collapsed = FALSE)
    ) %>%
    addScaleBar(position = "bottomright", options = scaleBarOptions(imperial = FALSE)) %>%
    setView(lng = 16.5, lat = 39.0, zoom = 10)

cat("Visualizzazione completata con successo.\n")












#PAM

# Validazione della stabilità dei cluster con clusterboot e PAM
clusterboot_result <- clusterboot(
    data = som_values,                   # Usa i valori SOM
    B = 50,                             # Numero di campioni bootstrap
    clustermethod = pamkCBI,   # Metodo PAM personalizzato
    bootmethod = "boot",                 # Usa bootstrap non parametrico
    dissolution = 0.5,                   # Valore di dissoluzione per i cluster instabili
    recover = 0.75,                      # Valore di recupero per i cluster stabili
    count = FALSE,                       # Mostra il progresso durante il bootstrap
    k = 5                 # Usa il numero ottimale di cluster trovato con NbClust
)

# Stampa i risultati della stabilità dei cluster
cat("Risultati della stabilità dei cluster con clusterboot (PAM):\n")
print(clusterboot_result$bootmean)    # Media della stabilità per ogni cluster
print(clusterboot_result$bootrecover) # Numero di volte che ogni cluster è stato recuperato
print(clusterboot_result$bootbrd)     # Numero di volte che ogni cluster è stato dissolto

# Visualizzazione della stabilità
barplot(clusterboot_result$bootmean, 
        main = "Stabilità dei Cluster con PAM e Bootstrap", 
        ylab = "Media della Similarità di Jaccard", 
        xlab = "Cluster", 
        col = "lightblue",
        ylim = c(0, 1))  # Limita l'asse y tra 0 e 1

# Esegui PAM con il numero ottimale di cluster
set.seed(42)  # Per riproducibilità
pam_result <- pam(som_values, k = 5, diss = FALSE)

# Crea un raster classificato usando i cluster di PAM
classified_raster_pam <- rast(img_84)  # Utilizza il pacchetto 'terra'
values(classified_raster_pam) <- NA
mask <- !is.na(values(img_84[[1]]))  # Crea una maschera dai valori non NA del raster originale
values(classified_raster_pam)[mask] <- pam_result$clustering[som_model$unit.classif]

# Seleziona solo la prima banda del raster per evitare messaggi di avvertimento
classified_raster_pam_single <- classified_raster_pam[[1]]

# Carica la palette turbo
palette_turbo <- viridisLite::turbo(optimal_clusters)

# Visualizzazione con Leaflet
leaflet() %>%
    addTiles(group = "OpenStreetMap") %>%
    addProviderTiles("Esri.WorldImagery", group = "Immagine Satellitare") %>%
    addProviderTiles("CartoDB.Positron", group = "Mappa Chiara") %>%
    addRasterImage(classified_raster_pam_single, 
                   colors = palette_turbo, 
                   opacity = 0.6, 
                   group = "Classificato con PAM") %>%
    addLayersControl(
        baseGroups = c("OpenStreetMap", "Immagine Satellitare", "Mappa Chiara"),
        overlayGroups = c("Classificato con PAM"),
        options = layersControlOptions(collapsed = FALSE)
    ) %>%
    addScaleBar(position = "bottomright", options = scaleBarOptions(imperial = FALSE)) %>%
    setView(lng = 16.5, lat = 39.0, zoom = 10)

cat("Visualizzazione completata con successo.\n")













#CLARA

# Validazione della stabilità dei cluster con clusterboot e Clara (PAM)
cluster_boot_pam <- clusterboot(
    data = som_values,                   # Usa i valori SOM
    B = 500,                             # Numero di campioni bootstrap
    clustermethod = clara_cluster_method, # Metodo Clara personalizzato
    bootmethod = "boot",                 # Usa bootstrap non parametrico
    dissolution = 0.5,                   # Valore di dissoluzione per i cluster instabili
    recover = 0.75,                      # Valore di recupero per i cluster stabili
    count = FALSE,                       # Mostra il progresso durante il bootstrap
    k = 5                                # Numero di cluster (ottimale trovato con NbClust)
)

# Stampa i risultati della stabilità dei cluster
cat("Risultati della stabilità dei cluster con clusterboot (Clara PAM):\n")
print(cluster_boot_pam$bootmean)      # Media della stabilità per ogni cluster
print(cluster_boot_pam$bootrecover)   # Numero di volte che ogni cluster è stato recuperato
print(cluster_boot_pam$bootbrd)       # Numero di volte che ogni cluster è stato dissolto

# Visualizzazione della stabilità dei cluster
barplot(
    cluster_boot_pam$bootmean, 
    main = "Stabilità dei Cluster con PAM e Bootstrap", 
    ylab = "Media della Similarità di Jaccard", 
    xlab = "Cluster", 
    col = "lightblue",
    ylim = c(0, 1)  # Limita l'asse y tra 0 e 1
)

# Esegui Clara (PAM) con il numero ottimale di cluster
set.seed(42)  # Per riproducibilità
clara_pam_result <- clara(som_values, k = 5)

# Crea un raster classificato usando i cluster di Clara (PAM)
classified_raster_pam <- rast(img_84)  # Utilizza il pacchetto 'terra'
values(classified_raster_pam) <- NA
valid_mask <- !is.na(values(img_84[[1]]))  # Crea una maschera dai valori non NA del raster originale
values(classified_raster_pam)[valid_mask] <- clara_pam_result$clustering[som_model$unit.classif]

# Seleziona solo la prima banda del raster per evitare messaggi di avvertimento
classified_raster_pam_single <- classified_raster_pam[[1]]

# Carica la palette turbo
turbo_palette <- viridisLite::turbo(5)  # 5 cluster

# Visualizzazione del raster classificato con Leaflet
leaflet() %>%
    addTiles(group = "OpenStreetMap") %>%
    addProviderTiles("Esri.WorldImagery", group = "Immagine Satellitare") %>%
    addProviderTiles("CartoDB.Positron", group = "Mappa Chiara") %>%
    
    # Aggiungi il raster classificato
    addRasterImage(
        classified_raster_pam_single, 
        colors = turbo_palette, 
        opacity = 0.6, 
        group = "Classificato con PAM"
    ) %>%
    
    # Aggiungi i controlli per cambiare i layer di base e i gruppi di layer
    addLayersControl(
        baseGroups = c("OpenStreetMap", "Immagine Satellitare", "Mappa Chiara"),
        overlayGroups = c("Classificato con PAM"),
        options = layersControlOptions(collapsed = FALSE)
    ) %>%
    
    # Aggiungi una barra di scala
    addScaleBar(position = "bottomright", options = scaleBarOptions(imperial = FALSE)) %>%
    
    # Centra la mappa sul raster (modifica i valori per il tuo AOI)
    setView(lng = 16.5, lat = 39.0, zoom = 10)

cat("Visualizzazione completata con successo.\n")
