# Inizia a misurare il tempo
start_time <- Sys.time()

# Carica le librerie necessarie
check_and_install <- function(packages) {
    installed <- packages %in% rownames(installed.packages())
    if (any(!installed)) {
        install.packages(packages[!installed])
    }
    invisible(lapply(packages, library, character.only = TRUE))
}

required_packages <- c("fpc", "terra", "dplyr", "kohonen", "parallel", "leaflet", "ggplot2", "viridisLite")
check_and_install(required_packages)

# Imposta la working directory
setwd("C:/composite")

# Carica il raster multibanda
img_84 <- rast("L5 Composite 1984-1990_masked.tif")

# Seleziona le bande necessarie (B1, B2, B3, B4, B5, B7)
l1984 <- img_84[[c(1, 2, 3, 4, 5, 6)]]

# Calcola gli indici NDVI, MNDWI e NDBI
ndvi_1984 <- (l1984[[4]] - l1984[[3]]) / (l1984[[4]] + l1984[[3]])
mndwi_1984 <- (l1984[[2]] - l1984[[5]]) / (l1984[[2]] + l1984[[5]])
ndbi_1984 <- (l1984[[5]] - l1984[[4]]) / (l1984[[5]] + l1984[[4]])

# Crea lo stack con bande e indici originali
stack_1984 <- c(l1984, ndvi_1984, mndwi_1984, ndbi_1984)

# Estrai i valori dal raster stack come dataframe e rimuovi i valori NA
values_stack_1984 <- as.data.frame(values(stack_1984))
values_stack_1984_non_na <- values_stack_1984[complete.cases(values_stack_1984), ]

# Standardizza i dati
values_stack_1984_scaled <- scale(values_stack_1984_non_na)

# Conta il numero di osservazioni valide
n <- nrow(values_stack_1984_scaled)
print(paste("Numero di osservazioni valide:", n))

# Calcola il numero totale di neuroni utilizzando la formula della mappa piccola
neurons <- (5 * sqrt(n)) / 4
print(paste("Numero suggerito di neuroni per la mappa piccola:", round(neurons)))

# Suggerisci una configurazione di griglia approssimata
x_dim <- round(sqrt(neurons))
y_dim <- round(neurons / x_dim)
print(paste("Dimensioni della griglia suggerite:", x_dim, "x", y_dim))

# Definisci una griglia SOM con le dimensioni calcolate
som_grid <- somgrid(xdim = x_dim, ydim = y_dim, topo = "hexagonal")

# Converte il data frame in matrice numerica
values_matrix <- as.matrix(values_stack_1984_scaled)

# Esegui SuperSOM con parallelizzazione usando i dati originali
som_model <- supersom(
    list(values_matrix), 
    grid = som_grid, 
    rlen = 100, 
    mode = "pbatch", 
    cores = -1  # Usa tutti i core disponibili
)

# Visualizza i cambiamenti durante l'addestramento della SOM
plot(som_model, type = "changes")

# Ottieni i codici della SOM (valori ridotti dimensionalmente)
som_values <- som_model$codes[[1]]

# Imposta il numero ottimale di cluster a 5
optimal_clusters <- 5
print(paste("Il numero di cluster è stato impostato a:", optimal_clusters))

# Usa il numero di cluster con clusterboot e kmeansCBI
library(fpc)

clusterboot_result <- clusterboot(
    data = som_values,            # Usa i valori SOM
    B = 500,                      # Numero di campioni bootstrap
    clustermethod = kmeansCBI,    # Metodo K-means tramite interfaccia kmeansCBI
    bootmethod = "boot",          # Usa bootstrap non parametrico
    dissolution = 0.5,            # Valore di dissoluzione per i cluster instabili
    recover = 0.75,               # Valore di recupero per i cluster stabili
    count = FALSE,                # Mostra il progresso durante il bootstrap
    k = optimal_clusters          # Usa il numero di cluster impostato
)

# Stampa i risultati della stabilità dei cluster
cat("Risultati della stabilità dei cluster con clusterboot:\n")

print(clusterboot_result$bootmean)    # Media della stabilità per ogni cluster
print(clusterboot_result$bootrecover) # Numero di volte che ogni cluster è stato recuperato
print(clusterboot_result$bootbrd)     # Numero di volte che ogni cluster è stato dissolto

# Visualizzazione della stabilità
barplot(clusterboot_result$bootmean, 
        main = "Stabilità dei Cluster con K-means e Bootstrap", 
        ylab = "Media della Similarità di Jaccard", 
        xlab = "Cluster", 
        col = "lightblue")

# Esegui K-means con il numero di cluster impostato
kmeans_result <- kmeans(som_values, centers = optimal_clusters, nstart = 100, iter.max = 1000)

# Crea un raster classificato usando i cluster di K-means
classified_raster <- rast(img_84)
values(classified_raster) <- NA
mask <- !is.na(values(img_84[[1]]))  # Crea una maschera dai valori non NA del raster originale
values(classified_raster)[mask] <- kmeans_result$cluster[som_model$unit.classif]

# Seleziona solo la prima banda del raster per evitare messaggi di avvertimento
classified_raster_single <- classified_raster[[1]]

# Carica la palette turbo
palette_turbo <- viridisLite::turbo

# Visualizza il raster classificato con leaflet
leaflet() %>%
    # Aggiungi le tiles di base
    addTiles(group = "OpenStreetMap") %>%
    addProviderTiles("Esri.WorldImagery", group = "Immagine Satellitare") %>%
    addProviderTiles("CartoDB.Positron", group = "Mappa Chiara") %>%
    
    # Aggiungi il raster classificato
    addRasterImage(classified_raster_single, 
                   colors = palette_turbo(optimal_clusters), 
                   opacity = 0.6, 
                   group = "Classificato con K-means") %>%
    
    # Aggiungi i controlli per cambiare i layer di base e i gruppi di layer
    addLayersControl(
        baseGroups = c("OpenStreetMap", "Immagine Satellitare", "Mappa Chiara"),  # Layer di base
        overlayGroups = c("Classificato con K-means"),  # Layer classificati
        options = layersControlOptions(collapsed = FALSE)  # Espandi il menu dei layer di default
    ) %>%
    
    # Aggiungi una barra di scala
    addScaleBar(position = "bottomright", options = scaleBarOptions(imperial = FALSE)) %>%
    
    # Centra la mappa sul raster (modifica i valori per il tuo AOI)
    setView(lng = 16.5, lat = 39.0, zoom = 10)

cat("Visualizzazione completata con successo.\n")

# Termina la misurazione del tempo
end_time <- Sys.time()

# Calcola il tempo di esecuzione
execution_time <- end_time - start_time
print(paste("Tempo totale di esecuzione:", execution_time))


















# Inizia a misurare il tempo
start_time <- Sys.time()

# Carica le librerie necessarie
check_and_install <- function(packages) {
  installed <- packages %in% rownames(installed.packages())
  if (any(!installed)) {
    install.packages(packages[!installed])
  }
  invisible(lapply(packages, library, character.only = TRUE))
}

required_packages <- c("fpc", "terra", "dplyr", "kohonen", "parallel", "leaflet", "ggplot2", "viridisLite")
check_and_install(required_packages)

# Imposta la working directory
setwd("C:/composite")

# Carica il raster multibanda
img_84 <- rast("L5 Composite 1984-1990_masked.tif")

# Seleziona le bande necessarie (B1, B2, B3, B4, B5, B7)
l1984 <- img_84[[c(1, 2, 3, 4, 5, 6)]]

# Calcola gli indici NDVI, MNDWI e NDBI
ndvi_1984 <- (l1984[[4]] - l1984[[3]]) / (l1984[[4]] + l1984[[3]])
mndwi_1984 <- (l1984[[2]] - l1984[[5]]) / (l1984[[2]] + l1984[[5]])
ndbi_1984 <- (l1984[[5]] - l1984[[4]]) / (l1984[[5]] + l1984[[4]])

# Crea lo stack con bande e indici originali
stack_1984 <- c(l1984, ndvi_1984, mndwi_1984, ndbi_1984)

# Estrai i valori dal raster stack come dataframe e rimuovi i valori NA
values_stack_1984 <- as.data.frame(values(stack_1984))
values_stack_1984_non_na <- values_stack_1984[complete.cases(values_stack_1984), ]

# Standardizza i dati
values_stack_1984_scaled <- scale(values_stack_1984_non_na)

# Conta il numero di osservazioni valide
n <- nrow(values_stack_1984_scaled)
print(paste("Numero di osservazioni valide:", n))

# Calcola il numero totale di neuroni utilizzando la formula della mappa piccola
neurons <- 10*(sqrt(n))
print(paste("Numero suggerito di neuroni per la mappa piccola:", round(neurons)))

# Suggerisci una configurazione di griglia approssimata
x_dim <- round(sqrt(neurons))
y_dim <- round(neurons / x_dim)
print(paste("Dimensioni della griglia suggerite:", x_dim, "x", y_dim))

# Definisci una griglia SOM con le dimensioni calcolate
som_grid <- somgrid(xdim = x_dim, ydim = y_dim, topo = "hexagonal")

# Converte il data frame in matrice numerica
values_matrix <- as.matrix(values_stack_1984_scaled)

# Esegui SuperSOM con parallelizzazione usando i dati originali
som_model <- supersom(
  list(values_matrix), 
  grid = som_grid, 
  rlen = 50, 
  mode = "pbatch", 
  cores = -1  # Usa tutti i core disponibili
)

# Visualizza i cambiamenti durante l'addestramento della SOM
plot(som_model, type = "changes")



# Termina la misurazione del tempo
end_time <- Sys.time()

# Calcola il tempo di esecuzione
execution_time <- end_time - start_time
print(paste("Tempo totale di esecuzione:", execution_time))


# Calcola le metriche di qualità del SOM
quality <- somQuality(som_model, values_matrix)

# Stampa le metriche di qualità per valutare le performance del SOM
cat("\nQualità della mappa SOM (griglia più grande):\n")
cat("Quantization Error:", quality$err.quant, "\n")
cat("Percentage of Explained Variance:", quality$err.varratio, "\n")
cat("Topographic Error:", quality$err.topo, "\n")


















#AREE

# ====================================================
# Sezione 1: Installazione e caricamento delle librerie
# ====================================================

check_and_install <- function(packages) {
    installed <- packages %in% rownames(installed.packages())
    if (any(!installed)) {
        install.packages(packages[!installed], dependencies = TRUE)
    }
    invisible(lapply(packages, library, character.only = TRUE))
}

required_packages <- c(
    "fpc", "terra", "dplyr", "kohonen",
    "parallel", "leaflet", "ggplot2", "viridis", 
    "mclust", "tclust", "viridisLite", "htmltools"
)

check_and_install(required_packages)

# ====================================================
# Sezione 2: Impostazioni iniziali
# ====================================================

# Imposta la working directory
setwd("C:/composite")

# ====================================================
# Sezione 3: Caricamento e preparazione dei dati
# ====================================================

# Carica il raster multibanda
img_84 <- rast("L5 Composite 1984-1990_masked.tif")

# Seleziona le bande necessarie (B1, B2, B3, B4, B5, B7)
selected_bands <- c(1, 2, 3, 4, 5, 7)  # Assicurati che l'indice della banda 7 sia corretto
l1984 <- img_84[[selected_bands]]

# Carica il modello SOM dal file
som_model <- readRDS("som_model_20X20_84-90_1000_NO_PCA.rds")
cat("Modello SOM caricato correttamente.\n")

# Ottieni i codici della SOM (valori ridotti dimensionalmente)
som_values <- som_model$codes[[1]]

# ====================================================
# Sezione 4: Impostazione del numero ottimale di cluster
# ====================================================

# Imposta il numero ottimale di cluster a 6
optimal_clusters <- 6
cat("Numero ottimale di cluster impostato a:", optimal_clusters, "\n")

# ====================================================
# Sezione 5: Clustering con tclustCBI
# ====================================================

# Esegui il clustering con tclustCBI
fixmahal_result <- tclustCBI(som_values, 
                             k = optimal_clusters, 
                             trim = 0, 
                             restr.fact = 256)
cat("Clustering con tclustCBI completato.\n")

# ====================================================
# Sezione 6: Creazione del raster classificato
# ====================================================

# Crea un raster vuoto con le stesse caratteristiche di img_84
classified_raster_mahal <- rast(img_84)
values(classified_raster_mahal) <- NA

# Crea una maschera dai valori non NA del raster originale
mask <- !is.na(values(img_84[[1]]))

# Accedi alle assegnazioni dei cluster corrette
cluster_assignments <- fixmahal_result$partition[som_model$unit.classif]

# Verifica che la lunghezza di cluster_assignments corrisponda al numero di pixel mascherati
if (length(cluster_assignments) != sum(mask)) {
    stop("La lunghezza di 'cluster_assignments' non corrisponde al numero di pixel mascherati.")
}

# Assegna i valori di cluster al raster
values(classified_raster_mahal)[mask] <- cluster_assignments

# Seleziona solo la prima banda del raster per evitare messaggi di avvertimento
classified_raster_mahal_single <- classified_raster_mahal[[1]]

# ====================================================
# Sezione 7: Calcolo delle aree dei cluster
# ====================================================

# Calcola l'area totale per ciascun valore di cluster usando expanse
area_totale <- expanse(classified_raster_mahal_single, byValue = TRUE, unit = "km")

# Sostituisci i valori alterati con gli indici corretti dei cluster
area_totale$value <- 1:nrow(area_totale)  # Ripristina i valori come 1, 2, ..., n

# Crea la tabella aggiornata delle etichette
class_labels_updated <- data.frame(
    value = area_totale$value,
    Classe = paste("Cluster", area_totale$value, 
                   "(", round(area_totale$area, 2), " km²)")
)

# Aggiorna i livelli del raster
levels(classified_raster_mahal_single) <- class_labels_updated

# Verifica i livelli aggiornati
print(levels(classified_raster_mahal_single))

# ====================================================
# Sezione 8: Creazione della mappa Leaflet
# ====================================================

# Creazione della palette "turbo"
col_pal <- viridisLite::turbo(length(class_labels_updated$value))

# Creazione della funzione di mappatura dei colori con NA trasparente
color_pal <- colorNumeric(
    palette = col_pal,
    domain = class_labels_updated$value,
    na.color = "transparent"  # Imposta i valori NA come trasparenti
)

# Creazione della mappa Leaflet
leaflet_map_updated <- leaflet() %>%
    # Aggiungi i layer di base
    addTiles(group = "OpenStreetMap") %>%
    addProviderTiles("Esri.WorldImagery", group = "Immagine Satellitare") %>%
    addProviderTiles("CartoDB.Positron", group = "Mappa Chiara") %>%
    
    # Aggiungi il raster classificato come overlay
    addRasterImage(
        classified_raster_mahal_single, 
        colors = color_pal, 
        opacity = 0.8,
        project = TRUE,
        group = "Raster Classificato"
    ) %>%
    
    # Aggiungi la legenda con le etichette aggiornate
    addLegend(
        position = "bottomright",
        colors = col_pal,
        labels = class_labels_updated$Classe,
        title = "Cluster",
        opacity = 1
    ) %>%
    
    # Aggiungi il controllo dei layer
    addLayersControl(
        baseGroups = c("OpenStreetMap", "Immagine Satellitare", "Mappa Chiara"),
        overlayGroups = c("Raster Classificato"),
        options = layersControlOptions(collapsed = FALSE),
        position = "topright"
    )

# Visualizza la mappa
leaflet_map_updated

