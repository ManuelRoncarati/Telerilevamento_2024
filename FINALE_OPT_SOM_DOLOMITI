#CODICE PER LE DIVERSE FOMULE SOM GRIGLIA NEURONI
# Carica le librerie necessarie
library(kohonen)
library(terra)
library(openxlsx)  # Per salvare in formato Excel

# Definisci i percorsi delle cartelle e associa un'etichetta per il tipo di griglia
folders <- list(
  "default_map"   = "C:/PN_Dolomiti_Bellunesi/som_Dolomiti_Bellunesi",
  "5_4_radice_n"  = "C:/PN_Dolomiti_Bellunesi/som_Dolomiti_Bellunesi_5_4_radice_n",
  "radice_n"      = "C:/PN_Dolomiti_Bellunesi/som_Dolomiti_Bellunesi_radice_n"
)

# Lista in cui salvare i risultati
results_list <- list()

# Itera su ciascuna cartella
for(grid_type in names(folders)) {
  folder <- folders[[grid_type]]
  
  # Cerca tutti i file con il modello SOM (file che terminano in _som_model.rds)
  file_list <- list.files(path = folder, pattern = "_som_model\\.rds$", full.names = TRUE)
  
  if(length(file_list) > 0) {
    for(file_model in file_list) {
      cat("Caricamento modello da:", file_model, "\n")
      
      # Carica il modello SOM
      som_model <- readRDS(file_model)
      
      # Verifica che i dati di training siano salvati nel modello (assumiamo siano il primo elemento della lista 'data')
      if (!is.null(som_model$data) && length(som_model$data) > 0) {
        training_data <- som_model$data[[1]]
      } else {
        warning(paste("Il modello", file_model, "non contiene dati di training."))
        next
      }
      
      # Calcola le metriche di qualità usando i dati di training
      quality <- somQuality(som_model, as.matrix(training_data))
      
      # Estrai informazioni sulla griglia
      grid_info <- som_model$grid
      x_dim <- grid_info$xdim
      y_dim <- grid_info$ydim
      n_nodes <- x_dim * y_dim
      
      # Crea una riga per il data frame con tutte le informazioni
      results_list[[length(results_list) + 1]] <- data.frame(
        GridType           = grid_type,
        ModelFile          = basename(file_model),
        Nodes              = n_nodes,
        X_dim              = x_dim,
        Y_dim              = y_dim,
        QuantizationError  = quality$err.quant,
        ExplainedVariance  = quality$err.varratio,
        TopographicError   = quality$err.topo,
        KaskiLagusError    = quality$err.kaski,
        stringsAsFactors   = FALSE
      )
    }
  } else {
    cat("Nessun modello SOM trovato in:", folder, "\n")
  }
}

# Combina tutte le righe in un unico data frame
results_df <- do.call(rbind, results_list)

# Visualizza la tabella dei risultati
print(results_df)

# Salva il data frame in un file Excel all'interno della cartella "C:/PN_Dolomiti_Bellunesi"
output_file <- "C:/PN_Dolomiti_Bellunesi/risultati_SOM.xlsx"
write.xlsx(results_df, output_file)
cat("Risultati salvati in:", output_file, "\n")































# ---------------------------------------------------------------------
# 1. Caricamento pacchetti
# ---------------------------------------------------------------------
# Se non li hai installati, decommenta le seguenti righe:
# install.packages("readxl")
# install.packages("ggplot2")
# install.packages("viridis")

library(readxl)
library(ggplot2)
library(viridis)

# ---------------------------------------------------------------------
# 2. Lettura del file Excel e conversione dei dati
# ---------------------------------------------------------------------
df <- read_excel("C:/PN_Dolomiti_Bellunesi/risultati_SOM.xlsx")

# Converte eventuali virgole decimali in numeri
numeric_cols <- c("QuantizationError", "ExplainedVariance", "TopographicError", "KaskiLagusError")
for (col in numeric_cols) {
  df[[col]] <- as.numeric(gsub(",", ".", df[[col]]))
}

# ---------------------------------------------------------------------
# 3. Rinomina dei livelli di GridType per maggiore chiarezza
# ---------------------------------------------------------------------
df$GridType <- factor(df$GridType,
  levels = c("radice_n", "5_4_radice_n", "default_map"),
  labels = c("√(n)", "5/4√(n)", "5√(n)")
)

# ---------------------------------------------------------------------
# 4. Tema personalizzato con testi grandi (35) e titoli centrati
# ---------------------------------------------------------------------
my_theme <- theme_minimal() +
  theme(
    plot.title   = element_text(size = 35, face = "bold", hjust = 0.5),
    axis.title   = element_text(size = 35, hjust = 0.5),
    axis.text    = element_text(size = 35),
    legend.title = element_text(size = 35),
    legend.text  = element_text(size = 35)
  )

# ---------------------------------------------------------------------
# 5. Creazione dei boxplot classici con linee più spesse
# ---------------------------------------------------------------------

# Boxplot per Quantization Error
p_quant <- ggplot(df, aes(x = GridType, y = QuantizationError, fill = GridType)) +
  geom_boxplot(size = 1.5) +
  scale_fill_viridis_d(option = "viridis") +
  labs(
    title = "Quantization Error per tipologia di griglia",
    x     = "Tipo di Griglia",
    y     = "Quantization Error"
  ) +
  my_theme

# Boxplot per Explained Variance
p_expl_var <- ggplot(df, aes(x = GridType, y = ExplainedVariance, fill = GridType)) +
  geom_boxplot(size = 1.5) +
  scale_fill_viridis_d(option = "viridis") +
  labs(
    title = "Explained Variance per tipologia di griglia",
    x     = "Tipo di Griglia",
    y     = "Explained Variance (%)"
  ) +
  my_theme

# Boxplot per Topographic Error
p_topo <- ggplot(df, aes(x = GridType, y = TopographicError, fill = GridType)) +
  geom_boxplot(size = 1.5) +
  scale_fill_viridis_d(option = "viridis") +
  labs(
    title = "Topographic Error per tipologia di griglia",
    x     = "Tipo di Griglia",
    y     = "Topographic Error"
  ) +
  my_theme

# Boxplot per Kaski-Lagus Error
p_kaski <- ggplot(df, aes(x = GridType, y = KaskiLagusError, fill = GridType)) +
  geom_boxplot(size = 1.5) +
  scale_fill_viridis_d(option = "viridis") +
  labs(
    title = "Kaski-Lagus Error per tipologia di griglia",
    x     = "Tipo di Griglia",
    y     = "Kaski-Lagus Error"
  ) +
  my_theme

# ---------------------------------------------------------------------
# 6. Visualizzazione dei grafici
# ---------------------------------------------------------------------
print(p_quant)
print(p_expl_var)
print(p_topo)
print(p_kaski)
