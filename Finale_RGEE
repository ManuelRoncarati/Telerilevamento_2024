
#mi raccomando settare la WD, codice rgee per landsat 5 e 8 per trovare copertura nuvolosa minima per 1 km quadro di scarto e almeno 20 immagini
# NO banda termica


library(rgee)

# Inizializza rgee
ee_Initialize()

# Definizione dell'AOI
aoi <- ee$FeatureCollection('projects/ee-roncaratimanuelciaooo/assets/stelvio')

# Funzione per applicare i fattori di scala
apply_scale_factors <- function(image) {
    optical_bands <- image$select('SR_B.')$multiply(0.0000275)$add(-0.2)
    image$addBands(optical_bands, NULL, TRUE)
}

# Funzione per calcolare l'area della composita filtrata e il numero di immagini
calculate_area_and_size <- function(cloud_cover, landsat_collection) {
    # Filtra la collezione in base alla copertura nuvolosa
    filtered <- landsat_collection$filter(ee$Filter$lt('CLOUD_COVER', cloud_cover))
    size <- filtered$size()$getInfo()
    
    if (size == 0) {
        return(list(area = NA, size = 0))
    }
    
    # Crea una composita media ritagliata
    composite <- filtered$mean()$clip(aoi)
    
    # Verifica se la composita ha bande valide
    band_names <- composite$bandNames()$getInfo()
    if (length(band_names) == 0) {
        return(list(area = NA, size = size))
    }
    
    # Calcola l'area dei pixel validi
    pixel_area <- ee$Image$pixelArea()
    valid_area <- composite$select(0)$gt(0)$multiply(pixel_area)$reduceRegion(
        reducer = ee$Reducer$sum(),
        geometry = aoi$geometry(),
        scale = 30,
        maxPixels = 1e13
    )
    
    # Ottieni il risultato della riduzione
    area_result <- valid_area$getInfo()
    
    if (length(area_result) == 0) {
        return(list(area = NA, size = size))
    }
    
    # Estrai il primo valore dalla lista e restituisci i risultati in km²
    area_value <- signif(unlist(area_result)[1] / 1e6, digits = 15)
    return(list(area = area_value, size = size))
}

# Sequenza di periodi di tempo da analizzare
periods <- list(
    c('1984-06-15', '1988-08-15'),
    c('1988-06-15', '1992-08-15'),
    c('1992-06-15', '1996-08-15'),
    c('1996-06-15', '2000-08-15'),
    c('2000-06-15', '2004-08-15'),
    c('2004-06-15', '2008-08-15'),
    c('2008-06-15', '2012-08-15'),
    c('2012-06-15', '2016-08-15'),
    c('2016-06-15', '2020-08-15'),
    c('2020-06-15', '2024-08-15')
)

# Liste per salvare i risultati
all_results <- list()
min_cloud_cover_results <- list()

# Itera su ogni periodo di tempo
for (period in periods) {
    start_date <- period[1]
    end_date <- period[2]
    
    # Collezione Landsat pre-filtrata per tempo e spazio
    if (as.Date(start_date) < as.Date('2012-06-15')) {
        landsat_base <- ee$ImageCollection('LANDSAT/LT05/C02/T1_L2')$
            filterBounds(aoi)$
            filter(ee$Filter$calendarRange(6, 8, 'month'))$
            filterDate(start_date, end_date)
    } else {
        landsat_base <- ee$ImageCollection('LANDSAT/LC08/C02/T1_L2')$
            filterBounds(aoi)$
            filter(ee$Filter$calendarRange(6, 8, 'month'))$
            filterDate(start_date, end_date)
    }
    
    # Applica i fattori di scala
    landsat <- landsat_base$map(apply_scale_factors)
    
    # Variabile per salvare la minima copertura nuvolosa con area ~uguale e almeno 20 immagini
    min_cloud_cover_with_same_area <- NA
    reference_area <- NA
    
    # Liste per salvare i risultati
    area_results <- list()
    size_results <- list()
    
    # Calcola l'area e il numero di immagini per ogni valore di copertura nuvolosa
    for (cloud_cover in seq(100, 1, by = -1)) {  # Continua fino all'1%
        tryCatch({
            result <- calculate_area_and_size(cloud_cover, landsat)
            area <- result$area
            size <- result$size
            
            area_results[[as.character(cloud_cover)]] <- area
            size_results[[as.character(cloud_cover)]] <- size
            
            # Se è la prima iterazione (100%), salva l'area di riferimento
            if (cloud_cover == 100) {
                reference_area <- area
            }
            
            # Controlla se l'area si discosta al massimo di 1 km² dalla reference e che il numero di immagini sia >= 20
            if (!is.na(area) && !is.na(reference_area) && abs(area - reference_area) <= 1 && size >= 20) {
                min_cloud_cover_with_same_area <- cloud_cover
            }
            
        }, error = function(e) {
            area_results[[as.character(cloud_cover)]] <- NA
            size_results[[as.character(cloud_cover)]] <- NA
        })
    }
    
    # Crea un dataframe con i risultati del periodo
    results_df <- data.frame(
        Cloud_Cover = as.numeric(names(area_results)),
        Area_km2 = unlist(area_results),
        Numero_Immagini = unlist(size_results),
        Periodo = paste(start_date, end_date, sep = " - ")
    )
    results_df <- results_df[order(-results_df$Cloud_Cover), ]
    
    # Aggiungi i risultati alla lista generale
    all_results[[paste(start_date, end_date)]] <- results_df
    
    # Se è stata trovata una minima copertura nuvolosa, stampa e memorizza i risultati
    if (!is.na(min_cloud_cover_with_same_area)) {
        cat(sprintf("Periodo: %s - Valore minimo di copertura nuvolosa con area entro ±1 km² e almeno 20 immagini: %d%%\n", 
                    paste(start_date, end_date), min_cloud_cover_with_same_area))
        min_cloud_cover_results[[paste(start_date, end_date)]] <- data.frame(
            Periodo = paste(start_date, end_date, sep = " - "),
            Min_Cloud_Cover = min_cloud_cover_with_same_area,
            Area_km2 = reference_area,
            Numero_Immagini = size_results[[as.character(min_cloud_cover_with_same_area)]]
        )
    }
}

# Unisci tutti i risultati in un unico dataframe
final_results_df <- do.call(rbind, all_results)
min_cloud_cover_df <- do.call(rbind, min_cloud_cover_results)

# Salva i risultati su file CSV
tryCatch({
    write.csv(final_results_df, "all_area_per_cloud_cover_optimized.csv", row.names = FALSE)
    write.csv(min_cloud_cover_df, "min_cloud_cover_results.csv", row.names = FALSE)
}, error = function(e) {
    cat("Errore durante il salvataggio del file CSV: ", e$message, "\n")
})

# Visualizza i dataframe finali
print(final_results_df)
print(min_cloud_cover_df)







# DA VERIFICARE, possibile correzione sulla questione dell'area della composita di riferimento, qui dovrebbe essere calcolata semmpre per ogni anno

library(rgee)
setwd("C:/abruzzo/prova")
# Inizializza rgee
ee_Initialize()


# Definizione dell'AOI
aoi <- ee$FeatureCollection('projects/ee-roncaratimanuelciaooo/assets/stelvio')

# Funzione per applicare i fattori di scala
apply_scale_factors <- function(image) {
    optical_bands <- image$select('SR_B.')$multiply(0.0000275)$add(-0.2)
    image$addBands(optical_bands, NULL, TRUE)
}

# Funzione per calcolare l'area della composita filtrata e il numero di immagini
calculate_area_and_size <- function(cloud_cover, landsat_collection) {
    filtered <- landsat_collection$filter(ee$Filter$lt('CLOUD_COVER', cloud_cover))
    size <- filtered$size()$getInfo()
    
    if (size == 0) {
        return(list(area = NA, size = 0))
    }
    
    composite <- filtered$median()$clip(aoi)
    pixel_area <- ee$Image$pixelArea()
    valid_area <- composite$select(0)$gt(0)$multiply(pixel_area)$reduceRegion(
        reducer = ee$Reducer$sum(),
        geometry = aoi$geometry(),
        scale = 30,
        maxPixels = 1e13
    )
    area_result <- valid_area$getInfo()
    
    if (length(area_result) == 0) {
        return(list(area = NA, size = size))
    }
    
    area_value <- round(unlist(area_result)[1] / 1e6, 3)
    return(list(area = area_value, size = size))
}

# Funzione per calcolare l'area di riferimento (100% copertura nuvolosa)
calculate_reference_area <- function(landsat_collection) {
    composite <- landsat_collection$filter(ee$Filter$lt('CLOUD_COVER', 100))$median()$clip(aoi)
    pixel_area <- ee$Image$pixelArea()
    valid_area <- composite$select(0)$gt(0)$multiply(pixel_area)$reduceRegion(
        reducer = ee$Reducer$sum(),
        geometry = aoi$geometry(),
        scale = 30,
        maxPixels = 1e13
    )
    area_result <- valid_area$getInfo()
    if (length(area_result) == 0) {
        return(NA)
    }
    area_value <- round(unlist(area_result)[1] / 1e6, 3)
    return(area_value)
}

# Sequenza di periodi di tempo da analizzare
periods <- list(
    c('1984-06-15', '1988-08-15'),
    c('1988-06-15', '1992-08-15'),
    c('1992-06-15', '1996-08-15'),
    c('1996-06-15', '2000-08-15'),
    c('2000-06-15', '2004-08-15'),
    c('2004-06-15', '2008-08-15'),
    c('2008-06-15', '2012-08-15'),
    c('2012-06-15', '2016-08-15'),
    c('2016-06-15', '2020-08-15'),
    c('2020-06-15', '2024-08-15')
)

# Liste per salvare i risultati
all_results <- list()
min_cloud_cover_results <- list()

# Calcola il tempo di esecuzione totale
start_time <- Sys.time()

# Itera su ogni periodo di tempo
for (period in periods) {
    start_date <- period[1]
    end_date <- period[2]
    
    # Collezione Landsat pre-filtrata per tempo e spazio
    if (as.Date(start_date) < as.Date('2012-06-15')) {
        landsat_base <- ee$ImageCollection('LANDSAT/LT05/C02/T1_L2')$
            filterBounds(aoi)$
            filter(ee$Filter$calendarRange(6, 8, 'month'))$
            filterDate(start_date, end_date)
    } else {
        landsat_base <- ee$ImageCollection('LANDSAT/LC08/C02/T1_L2')$
            filterBounds(aoi)$
            filter(ee$Filter$calendarRange(6, 8, 'month'))$
            filterDate(start_date, end_date)
    }
    
    landsat <- landsat_base$map(apply_scale_factors)
    
    reference_area <- calculate_reference_area(landsat_base)
    
    min_cloud_cover_with_same_area <- NA
    
    area_results <- list()
    size_results <- list()
    
    for (cloud_cover in seq(100, 1, by = -1)) {
        tryCatch({
            result <- calculate_area_and_size(cloud_cover, landsat)
            area <- result$area
            size <- result$size
            
            area_results[[as.character(cloud_cover)]] <- area
            size_results[[as.character(cloud_cover)]] <- size
            
            if (!is.na(area) && !is.na(reference_area) && abs(area - reference_area) <= 1 && size >= 1) {
                min_cloud_cover_with_same_area <- cloud_cover
            }
        }, error = function(e) {
            area_results[[as.character(cloud_cover)]] <- NA
            size_results[[as.character(cloud_cover)]] <- NA
        })
    }
    
    results_df <- data.frame(
        Cloud_Cover = as.numeric(names(area_results)),
        Area_km2 = unlist(area_results),
        Numero_Immagini = unlist(size_results),
        Periodo = paste(start_date, end_date, sep = " - ")
    )
    results_df <- results_df[order(-results_df$Cloud_Cover), ]
    
    all_results[[paste(start_date, end_date)]] <- results_df
    
    if (!is.na(min_cloud_cover_with_same_area)) {
        min_area <- area_results[[as.character(min_cloud_cover_with_same_area)]]
        min_cloud_cover_results[[paste(start_date, end_date)]] <- data.frame(
            Periodo = paste(start_date, end_date, sep = " - "),
            Min_Cloud_Cover = min_cloud_cover_with_same_area,
            Area_km2 = min_area,
            Numero_Immagini = size_results[[as.character(min_cloud_cover_with_same_area)]]
        )
    }
}

end_time <- Sys.time()
total_time <- end_time - start_time
cat(sprintf("Tempo totale di esecuzione: %s\n", total_time))

final_results_df <- do.call(rbind, all_results)
min_cloud_cover_df <- do.call(rbind, min_cloud_cover_results)

tryCatch({
    write.csv(final_results_df, "all_area_per_cloud_cover_optimized.csv", row.names = FALSE)
    write.csv(min_cloud_cover_df, "min_cloud_cover_results.csv", row.names = FALSE)
}, error = function(e) {
    cat("Errore durante il salvataggio del file CSV: ", e$message, "\n")
})

print(final_results_df)
print(min_cloud_cover_df)






















#FINALE DEFINITIVO???
# Carica le librerie necessarie
library(rgee)
library(openxlsx)

# Imposta la directory di lavoro
setwd('C:/Sila/cloud_cover')

# Inizializza rgee (accesso a Google Earth Engine)
ee_Initialize()

# Definizione dell'AOI (Area of Interest)
aoi <- ee$FeatureCollection('projects/ee-roncaratimanuelciaooo/assets/sila')

# Funzione per applicare i fattori di scala (correzione radiometrica)
apply_scale_factors <- function(image) {
    optical_bands <- image$select('SR_B.')$multiply(0.0000275)$add(-0.2)
    image$addBands(optical_bands, NULL, TRUE)
}

# Funzione per calcolare l'area della composita filtrata e il numero di immagini
calculate_area_and_size <- function(cloud_cover, landsat_collection) {
    # Filtra la collezione in base alla copertura nuvolosa
    filtered <- landsat_collection$filter(ee$Filter$lt('CLOUD_COVER', cloud_cover))
    size <- filtered$size()$getInfo()
    
    if (size == 0) {
        return(list(area = NA, size = 0))
    }
    
    # Crea una composita mediana ritagliata sull'AOI
    composite <- filtered$median()$clip(aoi)
    
    # Calcola l'area dei pixel validi
    pixel_area <- ee$Image$pixelArea()
    valid_area <- composite$gt(0)$multiply(pixel_area)$reduceRegion(
        reducer = ee$Reducer$sum(),
        geometry = aoi$geometry(),
        scale = 30,
        maxPixels = 1e13
    )
    
    # Ottieni il risultato della riduzione
    area_result <- valid_area$getInfo()
    
    if (length(area_result) == 0) {
        return(list(area = NA, size = size))
    }
    
    # Estrai il valore dell'area in km²
    area_value <- sum(unlist(area_result)) / 1e6
    return(list(area = area_value, size = size))
}

# Elenco dei periodi quadriennali da analizzare
periods <- list(
    c('1984-06-15', '1988-08-15'),
    c('1988-06-15', '1992-08-15'),
    c('1992-06-15', '1996-08-15'),
    c('1996-06-15', '2000-08-15'),
    c('2000-06-15', '2004-08-15'),
    c('2004-06-15', '2008-08-15'),
    c('2008-06-15', '2012-08-15'),
    c('2012-06-15', '2016-08-15'),
    c('2016-06-15', '2020-08-15'),
    c('2020-06-15', '2024-08-15')
)

# Liste per salvare i risultati
all_results <- list()
min_cloud_cover_results <- list()

# Itera su ogni periodo di tempo
for (period in periods) {
    start_date <- period[1]
    end_date <- period[2]
    
    # Seleziona la collezione Landsat appropriata in base alla data
    if (as.Date(start_date) < as.Date('2012-06-15')) {
        landsat_base <- ee$ImageCollection('LANDSAT/LT05/C02/T1_L2')$
            filterBounds(aoi)$
            filter(ee$Filter$calendarRange(6, 8, 'month'))$
            filterDate(start_date, end_date)
    } else {
        landsat_base <- ee$ImageCollection('LANDSAT/LC08/C02/T1_L2')$
            filterBounds(aoi)$
            filter(ee$Filter$calendarRange(6, 8, 'month'))$
            filterDate(start_date, end_date)
    }
    
    # Applica i fattori di scala (correzione radiometrica)
    landsat <- landsat_base$map(apply_scale_factors)
    
    # Variabile per salvare la minima copertura nuvolosa con area ~uguale e almeno 20 immagini (o 40, a seconda del caso)
    min_cloud_cover_with_same_area <- NA
    
    # Liste per salvare i risultati parziali
    area_results <- list()
    size_results <- list()
    
    # Calcola l'area e il numero di immagini per ogni valore di copertura nuvolosa
    for (cloud_cover in seq(100, 1, by = -1)) {
        tryCatch({
            result <- calculate_area_and_size(cloud_cover, landsat)
            area <- result$area
            size <- result$size
            
            area_results[[as.character(cloud_cover)]] <- area
            size_results[[as.character(cloud_cover)]] <- size
            
            # Se è la prima iterazione (cloud_cover == 100), salva l'area di riferimento
            if (cloud_cover == 100) {
                reference_area <- area
            }
            
            # Controlla se la nuova area si discosta meno di 5 km² dalla reference e se il numero di immagini supera la soglia
            if (!is.na(area) && !is.na(reference_area) && abs(area - reference_area) <= 5 && size >= 50) {
                min_cloud_cover_with_same_area <- cloud_cover
            }
        }, error = function(e) {
            # In caso di errore, si imposta NA
            area_results[[as.character(cloud_cover)]] <- NA
            size_results[[as.character(cloud_cover)]] <- NA
        })
    }
    
    # Crea un dataframe con i risultati
    results_df <- data.frame(
        Cloud_Cover = as.numeric(names(area_results)),
        Area_km2 = unlist(area_results),
        Numero_Immagini = unlist(size_results),
        Periodo = paste(start_date, end_date, sep = " - ")
    )
    results_df <- results_df[order(-results_df$Cloud_Cover), ]
    
    # Aggiungi i risultati alla lista generale
    all_results[[paste(start_date, end_date)]] <- results_df
    
    # Se è stata trovata una minima copertura nuvolosa valida, stampa e memorizza i risultati
    if (!is.na(min_cloud_cover_with_same_area)) {
        cat(sprintf("Periodo: %s - Valore minimo di copertura nuvolosa con area entro ±5 km² e almeno 20 immagini: %d%%\n", 
                    paste(start_date, end_date), min_cloud_cover_with_same_area))
        min_cloud_cover_results[[paste(start_date, end_date)]] <- data.frame(
            Periodo = paste(start_date, end_date, sep = " - "),
            Min_Cloud_Cover = min_cloud_cover_with_same_area,
            Area_km2 = area_results[[as.character(min_cloud_cover_with_same_area)]],
            Numero_Immagini = size_results[[as.character(min_cloud_cover_with_same_area)]]
        )
    }
}

# ====================================================
# Salva i risultati in un file Excel
# ====================================================

# Percorso del file Excel
output_excel_path <- "all_area_per_cloud_cover_results_+/-_5_50_img_Sila.xlsx"

# Crea il workbook e aggiungi i fogli
wb <- createWorkbook()
addWorksheet(wb, "All Results")
addWorksheet(wb, "Min Cloud Cover Results")

# Scrivi i dati nei fogli
writeData(wb, "All Results", do.call(rbind, all_results))
writeData(wb, "Min Cloud Cover Results", do.call(rbind, min_cloud_cover_results))

# Salva il file Excel
saveWorkbook(wb, output_excel_path, overwrite = TRUE)

cat("\nRisultati salvati in formato Excel:", output_excel_path, "\n")
