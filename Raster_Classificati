library(terra)
library(raster)
library(sf)
library(RStoolbox)
library(viridis)
library(randomForest)
library(dplyr)
library(ggplot2)

setwd("C:/esame/falsi colori sila")

# Lista dei tuoi raster
nir_files <- c("NIR_PN_SILA_84.TIF", "NIR_PN_SILA_93.TIF", "NIR_PN_SILA_2000.TIF", 
               "NIR_PN_SILA_2007.TIF", "NIR_PN_SILA_2014.TIF", "NIR_PN_SILA_2024.TIF")

# Funzione per processare i raster
process_raster <- function(nir_file) {
  # Carica il raster
  nir_raster <- raster(nir_file)
  
  # Estrai il nome di base senza estensione
  output_name <- tools::file_path_sans_ext(basename(nir_file))
  
  # Ottieni i valori del raster
  values <- getValues(nir_raster)
  
  # Crea un dataframe per l'addestramento
  data <- data.frame(value = values)
  
  # Esegui il k-means clustering
  set.seed(99)
  kmeans_result <- kmeans(na.omit(values), centers = 6)
  
  # Assegna i cluster ai dati
  data$cluster <- NA
  data$cluster[!is.na(values)] <- kmeans_result$cluster
  
  # Rimuovi le righe con valori NA
  training_data <- na.omit(data)
  
  # Crea il modello Random Forest
  rf_model <- randomForest(cluster ~ value, data = training_data, ntree = 150)
  
  # Classifica l'intero raster
  classified_values <- predict(rf_model, newdata = data.frame(value = values))
  classified_raster <- setValues(nir_raster, classified_values)
  
  # Converti il raster in poligoni
  polygons <- rasterToPolygons(classified_raster, fun = function(x) !is.na(x), dissolve = FALSE)
  polygons_sf <- st_as_sf(polygons)
  
  # Trova il nome della colonna che contiene i dati
  col_name <- names(polygons_sf)[1]
  
  # Rinominare il campo e arrotondare per difetto
  polygons_sf <- polygons_sf %>%
    rename(Classe = !!sym(col_name)) %>%
    mutate(Classe = as.integer(round(Classe)))
  
  # Esegui il dissolve per aggregare i poligoni con lo stesso valore di classe
  dissolved_polygons <- polygons_sf %>%
    group_by(Classe) %>%
    summarise(geometry = st_union(geometry), .groups = 'drop')
  
  # Calcola l'area in metri quadrati e aggiungi il campo "Area"
  dissolved_polygons <- dissolved_polygons %>%
    mutate(Area_m2 = st_area(geometry)) %>%
    mutate(Area_ha = Area_m2 / 10000) %>%
    mutate(geometry = st_make_valid(geometry))
  
  # Costruisci il percorso completo di output
  output_path <- file.path("C:/esame/falsi colori sila/raster_classificati", paste0(output_name, "_6_cluster.gpkg"))
  
  # Salva il file
  st_write(dissolved_polygons, output_path, delete_layer = TRUE)
}

# Loop attraverso i file e processa ciascuno
for (nir_file in nir_files) {
  process_raster(nir_file)
}


setwd("C:/esame/falsi colori sila/raster_classificati")

# Lista dei file GeoPackage
gpk_files <- c("NIR_PN_SILA_84_6_cluster.gpkg", "NIR_PN_SILA_93_6_cluster.gpkg",
               "NIR_PN_SILA_2000_6_cluster.gpkg", "NIR_PN_SILA_2007_6_cluster.gpkg",
               "NIR_PN_SILA_2014_6_cluster.gpkg", "NIR_PN_SILA_2024_6_cluster.gpkg")

# Anni corrispondenti ai file
years <- c("1984", "1993", "2000", "2007", "2014", "2024")

# Funzione per leggere e calcolare l'area per la classe 2 (acqua)
get_class_2_area <- function(file, year) {
  gpk <- st_read(file)
  class_2 <- gpk %>% filter(Classe == 2)
  
  # Estrai l'area per la classe 2 e verifica che ci sia solo una riga
  area_ha <- class_2$Area_ha
  if (length(area_ha) != 1) {
    stop(paste("Ci sono piÃ¹ di un'area per la classe 2 nel file:", file))
  }
  
  return(data.frame(Year = year, Area_ha = area_ha))
}

# Calcola l'area per la classe 2 per tutti i file
comparison_data <- do.call(rbind, mapply(get_class_2_area, gpk_files, years, SIMPLIFY = FALSE))

# Crea l'istogramma
ggplot(comparison_data, aes(x = Year, y = Area_ha, fill = Year)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = scales::comma(Area_ha)), vjust = -0.5) +  # Aggiungi i valori sopra le colonne
  labs(title = "Confronto dell'Area per la Classe 2 (Acqua)",
       x = "Anno",
       y = "Area (ha)") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))  # Centra il titolo
