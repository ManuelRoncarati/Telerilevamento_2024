# Imposta la working directory
setwd("D:/composite")

# Carica il raster multibanda
img_84 <- rast("L5 Composite 1984-1990_masked.tif")

# Seleziona le bande necessarie (B1, B2, B3, B4, B5, B7)
l1984 <- img_84[[c(1, 2, 3, 4, 5, 6)]]

# Calcola gli indici NDVI, MNDWI e NDBI
ndvi_1984 <- (l1984[[4]] - l1984[[3]]) / (l1984[[4]] + l1984[[3]])
mndwi_1984 <- (l1984[[2]] - l1984[[5]]) / (l1984[[2]] + l1984[[5]])
ndbi_1984 <- (l1984[[5]] - l1984[[4]]) / (l1984[[5]] + l1984[[4]])

# Crea lo stack con bande e indici
stack_1984 <- c(l1984, ndvi_1984, mndwi_1984, ndbi_1984)

# Estrai i valori dal raster stack come dataframe e rimuovi i valori NA
values_stack_1984 <- as.data.frame(values(stack_1984))
values_stack_1984_non_na <- values_stack_1984[complete.cases(values_stack_1984), ]

# PCA: esegui la PCA sullo stack e seleziona le prime due componenti principali
pca_result <- prcomp(values_stack_1984_non_na, center = TRUE, scale. = TRUE)
pca_values <- pca_result$x[, 1:3]  # Seleziona solo le prime due componenti

# Conta il numero di osservazioni valide
n <- nrow(pca_values)
print(paste("Numero di osservazioni valide:", n))
# [1] "Numero di osservazioni valide: 1069509"

# Calcola il numero totale di neuroni suggerito dalla formula
neurons <- 5 * sqrt(n)
print(paste("Numero suggerito di neuroni:", round(neurons)))
# [1] "Numero suggerito di neuroni: 5171"

# Suggerisci una configurazione di griglia approssimata
x_dim <- round(sqrt(neurons))
y_dim <- round(neurons / x_dim)
print(paste("Dimensioni della griglia suggerite:", x_dim, "x", y_dim))
# [1] "Dimensioni della griglia suggerite: 72 x 72"

# Definisci una griglia SOM con le dimensioni calcolate
som_grid <- somgrid(xdim = x_dim, ydim = y_dim, topo = "hexagonal")

# Esegui SuperSOM con parallelizzazione usando la PCA come input
som_model <- supersom(
    list(pca_values), 
    grid = som_grid, 
    rlen = 500, 
    alpha = c(0.05, 0.01),
    radius = quantile(dist(som_grid$pts), 2/3), 
    mode = "pbatch", 
    cores = -1  # Usa tutti i core disponibili
)

# Visualizza i cambiamenti durante l'addestramento della SOM
plot(som_model, type = "changes")

# Ottieni i codici della SOM (valori ridotti dimensionalmente)
som_values <- som_model$codes[[1]]

# Esegui tclustIC per trovare il numero ottimale di cluster
tclustIC_result <- tclustIC(
    x = som_values, 
    kk = 2:10,                 # Numero di cluster da 2 a 10
    cc = 128,                  # Fattore di restrizione fisso a 128
    alpha = 0,                 # Nessun outlier, impostato a 0
    whichIC = "ALL",           # Calcola tutti i criteri di informazione (MIXMIX, MIXCLA, CLACLA)
    parallel = TRUE,           # Esegui in parallelo
    n.cores = parallel::detectCores(),   # Utilizza tutti i core disponibili
    trace = FALSE               # Stampa i risultati intermedi
)

# Trova il numero ottimale di cluster per MIXMIX
min_value_mixmix <- min(tclustIC_result$MIXMIX, na.rm = TRUE)
optimal_mixmix <- which(tclustIC_result$MIXMIX == min_value_mixmix, arr.ind = TRUE)[1]
k_opt_mixmix <- rownames(tclustIC_result$MIXMIX)[optimal_mixmix]
G_mixmix <- as.numeric(gsub("k=", "", k_opt_mixmix))  # Rimuovi "k=" e salva solo il numero

# Trova il numero ottimale di cluster per MIXCLA
min_value_mixcla <- min(tclustIC_result$MIXCLA, na.rm = TRUE)
optimal_mixcla <- which(tclustIC_result$MIXCLA == min_value_mixcla, arr.ind = TRUE)[1]
k_opt_mixcla <- rownames(tclustIC_result$MIXCLA)[optimal_mixcla]
G_mixcla <- as.numeric(gsub("k=", "", k_opt_mixcla))

# Trova il numero ottimale di cluster per CLACLA
min_value_clacla <- min(tclustIC_result$CLACLA, na.rm = TRUE)
optimal_clacla <- which(tclustIC_result$CLACLA == min_value_clacla, arr.ind = TRUE)[1]
k_opt_clacla <- rownames(tclustIC_result$CLACLA)[optimal_clacla]
G_clacla <- as.numeric(gsub("k=", "", k_opt_clacla))

# Stampa i risultati ottimali
print(paste("Numero ottimale di cluster secondo MIXMIX:", G_mixmix))
# [1] "Numero ottimale di cluster secondo MIXMIX: 5"
print(paste("Numero ottimale di cluster secondo MIXCLA:", G_mixcla))
# [1] "Numero ottimale di cluster secondo MIXCLA: 5"
print(paste("Numero ottimale di cluster secondo CLACLA:", G_clacla))
# [1] "Numero ottimale di cluster secondo CLACLA: 6"

# Funzione per eseguire clusterboot e stampare i risultati per ciascun criterio
run_clusterboot <- function(k_value, som_values, label) {
    cat("\nEsecuzione di clusterboot per:", label, "con k =", k_value, "\n")
    result <- clusterboot(
        data = som_values,            # Usa i valori SOM
        B = 150,                      # Numero di campioni bootstrap
        clustermethod = tclustCBI,    # Metodo tclust tramite interfaccia tclustCBI
        bootmethod = "boot",          # Usa bootstrap non parametrico
        dissolution = 0.5,            # Valore di dissoluzione per i cluster instabili
        recover = 0.75,               # Valore di recupero per i cluster stabili
        count = FALSE,                # Mostra il progresso durante il bootstrap
        k = k_value,                  # Numero di cluster da tclust
        trim = 0                      # Nessun outlier
    )
    
    # Stampa i risultati della stabilità dei cluster
    cat("\nRisultati della stabilità dei cluster per:", label, "\n")
    print(result$bootmean)    # Media della stabilità per ogni cluster
    print(result$bootrecover) # Numero di volte che ogni cluster è stato recuperato
    print(result$bootbrd)     # Numero di volte che ogni cluster è stato dissolto
    
    # Visualizzazione della stabilità
    barplot(result$bootmean, 
            main = paste("Stabilità dei Cluster -", label), 
            ylab = "Media della Similarità di Jaccard", 
            xlab = "Cluster", 
            col = "lightblue")
    
    return(result)
}

# Esegui il bootstrap per ciascun valore di cluster
clusterboot_mixmix <- run_clusterboot(G_mixmix, som_values, "MIXMIX")

# Esecuzione di clusterboot per: MIXMIX con k = 5 
# Risultati della stabilità dei cluster per: MIXMIX 
# [1] 0.9073358 0.9389557 0.8764319 0.8234438 0.9839671
# [1] 149 150 144 121 150
# [1] 0 0 0 5 0

clusterboot_mixcla <- run_clusterboot(G_mixcla, som_values, "MIXCLA")

# Esecuzione di clusterboot per: MIXCLA con k = 5 
# Risultati della stabilità dei cluster per: MIXCLA 
# [1] 0.9407140 0.9117915 0.8824783 0.8333826 0.9798349
# [1] 148 148 147 120 148
# [1] 1 2 0 1 0

clusterboot_clacla <- run_clusterboot(G_clacla, som_values, "CLACLA")

# Esecuzione di clusterboot per: CLACLA con k = 6 
# Risultati della stabilità dei cluster per: CLACLA 
# [1] 0.9288579 0.9102063 0.8218671 0.7509995 0.8409135 0.4845012
# [1] 150 150 120  86 111  38
# [1]  0  0  4 19  0 80
