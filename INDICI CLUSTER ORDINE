# Imposta la directory di lavoro
setwd("C:/esame/falsi colori sila")

# Carica le librerie necessarie
library(terra)
library(ggplot2)

# Carica l'immagine NIR
nir_1984 <- rast("NIR_PN_SILA_84.TIF")

# Converti l'immagine in un vettore di valori pixel e rimuovi i NA
nir_vector <- na.omit(as.vector(nir_1984[]))

# Prendi un campione casuale di 20.000 pixel
set.seed(42)
sample_size <- 20000
sample_indices <- sample(seq_along(nir_vector), sample_size)
sample_vector <- nir_vector[sample_indices]

# Calcola WCSS per diversi numeri di cluster
wcss <- sapply(1:10, function(k) {
  kmeans(sample_vector, centers = k, nstart = 10)$tot.withinss
})

# Visualizza il metodo dell'Elbow
plot(1:10, wcss, type = "b", pch = 19, frame = FALSE,
     xlab = "Numero di cluster", ylab = "Within-Cluster Sum of Squares (WCSS)",
     main = "Metodo dell'Elbow per Determinare il Numero Ottimale di Cluster")


# Imposta la directory di lavoro
setwd("C:/esame/falsi colori sila")







# Imposta la directory di lavoro
setwd("C:/esame/falsi colori sila")

# Carica le librerie necessarie
library(terra)
library(cluster)
library(ggplot2)

# Carica l'immagine NIR
nir_1984 <- rast("NIR_PN_SILA_84.TIF")

# Converti l'immagine in un vettore di valori pixel e rimuovi i NA
nir_vector <- na.omit(as.vector(nir_1984[]))

# Prendi un campione casuale di 9.000 pixel
set.seed(42)
sample_size <- 9000
sample_indices <- sample(seq_along(nir_vector), sample_size)
sample_vector <- nir_vector[sample_indices]

# Calcola l'indice di silhouette per diversi numeri di cluster
sil_width <- sapply(3:10, function(k) {
  km <- kmeans(sample_vector, centers = k, nstart = 20)
  ss <- silhouette(km$cluster, dist(sample_vector))
  mean(ss[, 3])  # Media dell'indice di silhouette
})

# Identifica il numero di cluster con il massimo indice di silhouette
optimal_clusters <- which.max(sil_width) + 2  # +2 perché l'indice parte da 3 cluster

# Visualizza l'indice di silhouette
plot(3:10, sil_width, type = "b", pch = 19, frame = FALSE,
     xlab = "Numero di cluster",



# Imposta la directory di lavoro e carica le librerie necessarie
setwd("C:/esame/falsi colori sila")
library(terra)
library(mclust)

# Carica l'immagine NIR
nir_1984 <- rast("NIR_PN_SILA_84.TIF")

# Converti l'immagine in un vettore di valori pixel e rimuovi i NA
nir_vector <- na.omit(as.vector(nir_1984[]))

# Prendi un campione casuale di 1000 pixel
set.seed(42)  # Per riproducibilità
sample_size <- 1000
sample_indices <- sample(seq_along(nir_vector), sample_size)
sample_vector <- nir_vector[sample_indices]

# Applica Gaussian Mixture Models usando mclust
gmm_model <- Mclust(sample_vector)

# Visualizza il risultato e il BIC
plot(gmm_model, what = "BIC", main = "BIC per Gaussian Mixture Models")

# Numero ottimale di cluster secondo GMM
optimal_clusters_gmm <- gmm_model$G
print(paste("Numero ottimale di cluster secondo GMM:", optimal_clusters_gmm))




# Imposta la directory di lavoro e carica le librerie necessarie
setwd("C:/esame/falsi colori sila")
library(terra)
library(factoextra)

# Carica l'immagine NIR
nir_1984 <- rast("NIR_PN_SILA_84.TIF")

# Converti l'immagine in un vettore di valori pixel e rimuovi i NA
nir_vector <- na.omit(as.vector(nir_1984[]))

# Prendi un campione casuale di 1000 pixel
set.seed(42)  # Per riproducibilità
sample_size <- 1000
sample_indices <- sample(seq_along(nir_vector), sample_size)
sample_vector <- nir_vector[sample_indices]

# Applica Gap Statistic usando k-means
gap_stat <- clusGap(as.matrix(sample_vector), FUN = kmeans, nstart = 10, K.max = 10, B = 50)

# Visualizza il Gap Statistic con titolo personalizzato
fviz_gap_stat(gap_stat) + 
  ggtitle("Gap Statistic per Determinare il Numero Ottimale di Cluster")




# Indice di Dunn per k-means

# Imposta la directory di lavoro
setwd("C:/esame/falsi colori sila")

# Carica le librerie necessarie
library(terra)
library(cluster)
library(factoextra)

# Carica l'immagine NIR
nir_1984 <- rast("NIR_PN_SILA_84.TIF")

# Converti l'immagine in un vettore di valori pixel e rimuovi i NA
nir_vector <- na.omit(as.vector(nir_1984[]))

# Estrai un campione di 1000 pixel dal tuo dataset
set.seed(42)
sample_size <- 1000
sample_indices <- sample(seq_along(nir_vector), sample_size)
sample_vector <- nir_vector[sample_indices]
sample_matrix <- as.matrix(sample_vector)

# Funzione per calcolare l'indice di Dunn
dunn_index <- function(k, data) {
  km <- kmeans(data, centers = k, nstart = 10)
  cluster_data <- data.frame(cluster = km$cluster, data)
  
  dist_matrix <- dist(data)
  intra_cluster_dist <- sapply(unique(cluster_data$cluster), function(cluster_id) {
    cluster_points <- data[cluster_data$cluster == cluster_id, , drop = FALSE]
    if (nrow(cluster_points) > 1) {
      return(max(dist(cluster_points)))
    } else {
      return(0)
    }
  })
  
  max_intra_cluster_dist <- max(intra_cluster_dist)
  cluster_centers <- km$centers
  inter_cluster_dist <- as.matrix(dist(cluster_centers))
  min_inter_cluster_dist <- min(inter_cluster_dist[upper.tri(inter_cluster_dist)])
  
  if (max_intra_cluster_dist == 0) {
    return(0)
  } else {
    return(min_inter_cluster_dist / max_intra_cluster_dist)
  }
}

# Intervallo dei cluster da 3 a 10
k_values <- 3:10

# Calcola l'indice di Dunn per ogni valore di k
dunn_values <- sapply(k_values, function(k) dunn_index(k, sample_matrix))

# Visualizza l'indice di Dunn
plot(k_values, dunn_values, type = "b", pch = 19, frame = FALSE,
     xlab = "Numero di cluster", ylab = "Indice di Dunn",
     main = "Indice di Dunn per Determinare il Numero Ottimale di Cluster")

# Trova il numero ottimale di cluster
optimal_k_dunn <- k_values[which.max(dunn_values)]
cat("Numero ottimale di cluster secondo l'indice di Dunn:", optimal_k_dunn, "\n")


# Monte Carlo per Indice di Silhouette

# Imposta la directory di lavoro
setwd("C:/esame/falsi colori sila")

# Carica le librerie necessarie
library(terra)
library(cluster)
library(ggplot2)

# Carica l'immagine NIR
nir_1984 <- rast("NIR_PN_SILA_84.TIF")

# Converti l'immagine in un vettore di valori pixel e rimuovi i NA
nir_vector <- na.omit(as.vector(nir_1984[]))

# Imposta il campionamento
set.seed(42)
sample_size <- 1000
sample_indices <- sample(seq_along(nir_vector), sample_size)
sample_vector <- nir_vector[sample_indices]
sample_matrix <- matrix(sample_vector, ncol = 1)

# Funzione per calcolare l'indice di silhouette per un dato k
compute_silhouette <- function(k, data) {
  km <- kmeans(data, centers = k, nstart = 10)
  ss <- silhouette(km$cluster, dist(data))
  mean(ss[, 3])
}

# Monte Carlo per calcolare l'indice di silhouette
num_simulations <- 100
k_values <- 3:10
silhouette_matrix <- matrix(NA, nrow = num_simulations, ncol = length(k_values))

for (i in 1:num_simulations) {
  sampled_indices <- sample(seq_along(nir_vector), sample_size)
  sampled_vector <- nir_vector[sampled_indices]
  sampled_matrix <- matrix(sampled_vector, ncol = 1)
  
  for (k in k_values) {
    silhouette_matrix[i, k - 2] <- compute_silhouette(k, sampled_matrix)
  }
}

# Calcola la media dell'indice di silhouette per ogni k
mean_silhouette <- colMeans(silhouette_matrix)

# Visualizza il risultato
df <- data.frame(K = k_values, MeanSilhouette = mean_silhouette)
ggplot(df, aes(x = K, y = MeanSilhouette)) +
  geom_line() +
  geom_point() +
  labs(title = "Indice di Silhouette Medio per Ogni Numero di Cluster",
       x = "Numero di Cluster",
       y = "Indice di Silhouette Medio") +
  theme_minimal()


