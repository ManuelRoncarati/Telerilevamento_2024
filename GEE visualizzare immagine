https://github.com/krishnakafle/gee-tutorials/blob/main/Part%20F%20-%20Fundamentals/F3%20-%20Advanced%20Image%20Processing/F3.1%20Advanced%20Pixel-based%20Image%20Transformation/F31a-code.js


// Definisci l'AOI dal tuo shapefile
var aoi = ee.FeatureCollection('projects/ee-roncaratimanuelciaooo/assets/shape_sila');

// Centra la mappa sull'AOI
Map.centerObject(aoi, 10);

// Definisci le variabili temporali
var startDate = '1984-06-01';
var endDate = '1988-07-31';

// Carica e filtra la collezione Landsat 5
var landsat5 = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
    .filterBounds(aoi)
    .filter(ee.Filter.calendarRange(6, 7, 'month')) // Filtra solo i mesi di giugno e luglio
    .filterDate(startDate, endDate);

// Applica i fattori di scala
function applyScaleFactors(image) {
    var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
    var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
    return image.addBands(opticalBands, null, true)
        .addBands(thermalBands, null, true);
}

landsat5 = landsat5.map(applyScaleFactors);

// Crea una composite (mediana) e ritaglia l'AOI
var composite = landsat5.median().clip(aoi);

var visParams = {
    bands: ['SR_B3', 'SR_B2', 'SR_B1'], // Usa le bande corrispondenti per Landsat 5
    min: 0,
    max: 0.2
};
Map.addLayer(composite, visParams, 'L5 Composite');

// Filtra in base alla copertura nuvolosa (CLOUD_COVER)
var landsat5FiltClouds = landsat5
    .filterBounds(aoi)
    .filter(ee.Filter.calendarRange(6, 7, 'month')) // Filtra solo giugno e luglio
    .filterDate(startDate, endDate)
    .filter(ee.Filter.lessThan('CLOUD_COVER', 50));

// Crea un composite dalle immagini filtrate
var compositeFiltClouds = landsat5FiltClouds.median().clip(aoi);

Map.addLayer(compositeFiltClouds, visParams, 'L5 Composite cloud filter');

// Stampa la dimensione delle collezioni per confronto
print('Dimensione collezione landsat5', landsat5.size());
print('Dimensione collezione landsat5 con filtro nuvole', landsat5FiltClouds.size());

// Definisci la funzione di mascheratura delle nuvole
function maskSrClouds(image) {
    // Bit 0 - Fill
    // Bit 1 - Dilated Cloud
    // Bit 2 - Cirrus
    // Bit 3 - Cloud
    // Bit 4 - Cloud Shadow
    var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
    var saturationMask = image.select('QA_RADSAT').eq(0);

    return image.updateMask(qaMask)
        .updateMask(saturationMask);
}

// Applica la maschera per le nuvole alla collezione
var landsat5FiltMasked = landsat5FiltClouds.map(maskSrClouds);

// Crea un composite mascherato
var landsat5compositeMasked = landsat5FiltMasked.median().clip(aoi);

Map.addLayer(landsat5compositeMasked, visParams, 'L5 composite masked');

//  -----------------------------------------------------------------------
//  CHECKPOINT 
//  -----------------------------------------------------------------------




# CONFRONTO TRA LANDSAT 5 E LANDSAT 9


// Definisci l'AOI dal tuo shapefile
var aoi = ee.FeatureCollection('projects/ee-manuelroncarati1/assets/shape_sila');

// Centra la mappa sull'AOI
Map.centerObject(aoi, 10);

// Definisci le variabili temporali
var startDate = '1984-06-15';
var endDate = '1990-07-15';

// Carica e filtra la collezione Landsat 5
var landsat5 = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
    .filterBounds(aoi)
    .filter(ee.Filter.calendarRange(6, 7, 'month')) // Filtra solo i mesi di giugno e luglio
    .filterDate(startDate, endDate);

// Applica i fattori di scala
function applyScaleFactors(image) {
    var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
    var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
    return image.addBands(opticalBands, null, true)
        .addBands(thermalBands, null, true);
}

landsat5 = landsat5.map(applyScaleFactors);

// Crea una composite (mediana) e ritaglia l'AOI
var composite = landsat5.median().clip(aoi);

var visParams = {
    bands: ['SR_B3', 'SR_B2', 'SR_B1'], // Usa le bande corrispondenti per Landsat 5
    min: 0,
    max: 0.2
};
Map.addLayer(composite, visParams, 'L5 Composite');

// Filtra in base alla copertura nuvolosa (CLOUD_COVER)
var landsat5FiltClouds = landsat5
    .filterBounds(aoi)
    .filter(ee.Filter.calendarRange(6, 7, 'month')) // Filtra solo giugno e luglio
    .filterDate(startDate, endDate)
    .filter(ee.Filter.lessThan('CLOUD_COVER', 10));

// Crea un composite dalle immagini filtrate
var compositeFiltClouds = landsat5FiltClouds.median().clip(aoi);

Map.addLayer(compositeFiltClouds, visParams, 'L5 Composite cloud filter');

// Stampa la dimensione delle collezioni per confronto
print('Dimensione collezione landsat5', landsat5.size());
print('Dimensione collezione landsat5 con filtro nuvole', landsat5FiltClouds.size());

// Definisci la funzione di mascheratura delle nuvole
function maskSrClouds(image) {
    // Bit 0 - Fill
    // Bit 1 - Dilated Cloud
    // Bit 2 - Cirrus
    // Bit 3 - Cloud
    // Bit 4 - Cloud Shadow
    var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
    var saturationMask = image.select('QA_RADSAT').eq(0);

    return image.updateMask(qaMask)
        .updateMask(saturationMask);
}

// Applica la maschera per le nuvole alla collezione
var landsat5FiltMasked = landsat5FiltClouds.map(maskSrClouds);

// Crea un composite mascherato
var landsat5compositeMasked = landsat5FiltMasked.median().clip(aoi);

Map.addLayer(landsat5compositeMasked, visParams, 'L5 composite masked');

//  -----------------------------------------------------------------------
//  CHECKPOINT 
//  -----------------------------------------------------------------------


// Centra la mappa sull'AOI
Map.centerObject(aoi, 10);

// Definisci le variabili temporali per Landsat 9
var startDateL9 = '2019-06-15';
var endDateL9 = '2024-07-15';

// Carica e filtra la collezione Landsat 9
var landsat9 = ee.ImageCollection('LANDSAT/LC09/C02/T1_L2')
    .filterBounds(aoi)
    .filter(ee.Filter.calendarRange(6, 7, 'month')) // Filtra solo giugno e luglio
    .filterDate(startDateL9, endDateL9);

// Applica i fattori di scala a Landsat 9
function applyScaleFactorsL9(image) {
    var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
    var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
    return image.addBands(opticalBands, null, true)
        .addBands(thermalBands, null, true);
}

landsat9 = landsat9.map(applyScaleFactorsL9);

// Crea una composite (mediana) per Landsat 9 e ritaglia l'AOI
var compositeL9 = landsat9.median().clip(aoi);

var visParamsL9 = {
    bands: ['SR_B4', 'SR_B3', 'SR_B2'], // Bande per Landsat 9
    min: 0,
    max: 0.2
};
Map.addLayer(compositeL9, visParamsL9, 'L9 Composite');

// Filtra per copertura nuvolosa in Landsat 9
var landsat9FiltClouds = landsat9
    .filterBounds(aoi)
    .filter(ee.Filter.lessThan('CLOUD_COVER', 10));

// Crea un composite filtrato per le nuvole
var compositeFiltCloudsL9 = landsat9FiltClouds.median().clip(aoi);

Map.addLayer(compositeFiltCloudsL9, visParamsL9, 'L9 Composite cloud filter');

// Definisci la funzione di mascheratura delle nuvole
function maskSrClouds(image) {
    var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
    var saturationMask = image.select('QA_RADSAT').eq(0);
    return image.updateMask(qaMask)
        .updateMask(saturationMask);
}

// Applica la maschera per le nuvole a Landsat 9
var landsat9FiltMasked = landsat9FiltClouds.map(maskSrClouds);

// Crea un composite mascherato per Landsat 9
var landsat9compositeMasked = landsat9FiltMasked.median().clip(aoi);

Map.addLayer(landsat9compositeMasked, visParamsL9, 'L9 composite masked');

//  -----------------------------------------------------------------------
//  CHECKPOINT 
//  -----------------------------------------------------------------------





















// Definisci l'AOI dal tuo shapefile
var aoi = ee.FeatureCollection('projects/ee-roncaratimanuelciaooo/assets/parco_gran_sasso');

// Centra la mappa sull'AOI
Map.centerObject(aoi, 10);

// Definisci le variabili temporali
var startDate = '1984-06-01';
var endDate = '1988-07-31';

// Carica e filtra la collezione Landsat 5
var landsat5 = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
    .filterBounds(aoi)
    .filter(ee.Filter.calendarRange(6, 7, 'month')) // Filtra solo i mesi di giugno e luglio
    .filterDate(startDate, endDate);

// Applica i fattori di scala
function applyScaleFactors(image) {
    var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
    var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
    return image.addBands(opticalBands, null, true)
        .addBands(thermalBands, null, true);
}

landsat5 = landsat5.map(applyScaleFactors);

// Crea una composite (mediana) e ritaglia l'AOI
var composite = landsat5.median().clip(aoi);

var visParams = {
    bands: ['SR_B3', 'SR_B2', 'SR_B1'], // Usa le bande corrispondenti per Landsat 5
    min: 0,
    max: 0.2
};
Map.addLayer(composite, visParams, 'L5 Composite');

// Filtra in base alla copertura nuvolosa (CLOUD_COVER)
var landsat5FiltClouds = landsat5
    .filterBounds(aoi)
    .filter(ee.Filter.calendarRange(6, 7, 'month')) // Filtra solo giugno e luglio
    .filterDate(startDate, endDate)
    .filter(ee.Filter.lessThan('CLOUD_COVER', 50));

// Crea un composite dalle immagini filtrate
var compositeFiltClouds = landsat5FiltClouds.median().clip(aoi);

Map.addLayer(compositeFiltClouds, visParams, 'L5 Composite cloud filter');

// Definisci la funzione di mascheratura delle nuvole
function maskSrClouds(image) {
    // Bit 0 - Fill
    // Bit 1 - Dilated Cloud
    // Bit 2 - Cirrus
    // Bit 3 - Cloud
    // Bit 4 - Cloud Shadow
    var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
    var saturationMask = image.select('QA_RADSAT').eq(0);

    return image.updateMask(qaMask)
        .updateMask(saturationMask);
}

// Applica la maschera per le nuvole alla collezione
var landsat5FiltMasked = landsat5FiltClouds.map(maskSrClouds);

// Crea un composite mascherato
var landsat5compositeMasked = landsat5FiltMasked.median().clip(aoi);

Map.addLayer(landsat5compositeMasked, visParams, 'L5 composite masked');

//  -----------------------------------------------------------------------
//  Riempimento dei Valori Nulli
//  ----------------------------------------------------------------------

// Riempie i valori nulli di compositeMaskedSelected con quelli di compositeFiltCloudsSelected
var compositeMaskedSelected = landsat5compositeMasked.select(['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7']);
var compositeFiltCloudsSelected = compositeFiltClouds.select(['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7']);

// Usa unmask per riempire i valori nulli
var compositeFilled = compositeMaskedSelected.unmask(compositeFiltCloudsSelected);

Map.addLayer(compositeFilled, visParams, 'L5 Composite Filled');

// Esporta il risultato
Export.image.toDrive({
  image: compositeFilled,
  description: 'Composite_Filled_Selected',
  folder: 'EarthEngineExports', // Modifica con il nome della tua cartella Drive
  scale: 30, // Risoluzione in metri
  region: aoi.geometry(),
  maxPixels: 1e13
});





























library(rgee)

# Inizializza rgee
ee_Initialize()

# Definizione dell'AOI
aoi <- ee$FeatureCollection('projects/ee-roncaratimanuelciaooo/assets/stelvio')

# Intervallo temporale
start_date <- '1984-06-01'
end_date <- '1988-07-31'

# Collezione Landsat 5 pre-filtrata per tempo e spazio
landsat5_base <- ee$ImageCollection('LANDSAT/LT05/C02/T1_L2')$
  filterBounds(aoi)$
  filter(ee$Filter$calendarRange(6, 7, 'month'))$ # Mesi di giugno e luglio
  filterDate(start_date, end_date)

# Funzione per applicare i fattori di scala
apply_scale_factors <- function(image) {
  optical_bands <- image$select('SR_B.')$multiply(0.0000275)$add(-0.2)
  thermal_bands <- image$select('ST_B.*')$multiply(0.00341802)$add(149.0)
  image$addBands(optical_bands, NULL, TRUE)$addBands(thermal_bands, NULL, TRUE)
}

# Applica i fattori di scala (una sola volta)
landsat5 <- landsat5_base$map(apply_scale_factors)

# Funzione per calcolare l'area della composita filtrata
calculate_area <- function(cloud_cover) {
  cat(sprintf("Inizio calcolo per Copertura Nuvolosa: %d%%\n", cloud_cover))
  
  # Filtra la collezione in base alla copertura nuvolosa
  filtered <- landsat5$filter(ee$Filter$lt('CLOUD_COVER', cloud_cover))
  size <- filtered$size()$getInfo()
  cat(sprintf("Numero di immagini nella collezione filtrata: %d\n", size))
  
  if (size == 0) {
    cat(sprintf("Collezione vuota per Copertura Nuvolosa: %d%%\n", cloud_cover))
    return(NA)
  }
  
  # Crea una composita mediana ritagliata
  composite <- filtered$median()$clip(aoi)
  
  # Verifica se la composita ha bande valide
  band_names <- composite$bandNames()$getInfo()
  cat(sprintf("Bande nella composita: %s\n", paste(band_names, collapse = ", ")))
  
  if (length(band_names) == 0) {
    cat(sprintf("Composita vuota per Copertura Nuvolosa: %d%%\n", cloud_cover))
    return(NA)
  }
  
  # Calcola l'area dei pixel validi
  pixel_area <- ee$Image$pixelArea()
  valid_area <- composite$select(0)$gt(0)$multiply(pixel_area)$reduceRegion(
    reducer = ee$Reducer$sum(),
    geometry = aoi$geometry(),
    scale = 30,
    maxPixels = 1e13
  )
  
  # Ottieni il risultato della riduzione
  area_result <- valid_area$getInfo()
  print(area_result)
  
  if (is.null(area_result$constant)) {
    cat(sprintf("Riduzione non valida per Copertura Nuvolosa: %d%%\n", cloud_cover))
    return(NA)
  }
  
  return(area_result$constant)
}

# Sequenza di valori di copertura nuvolosa da analizzare
cloud_cover_values <- seq(50, 1, by = -1)

# Lista per salvare i risultati
area_results <- list()

# Calcola l'area per ogni valore di copertura nuvolosa
for (cloud_cover in cloud_cover_values) {
  tryCatch({
    area <- calculate_area(cloud_cover)
    cat(sprintf("Copertura Nuvolosa: %d%%, Area (m2): %.2f\n", cloud_cover, area))
    area_results[[as.character(cloud_cover)]] <- area
  }, error = function(e) {
    cat(sprintf("Errore per Copertura Nuvolosa: %d%%\n", cloud_cover))
    print(e)
    area_results[[as.character(cloud_cover)]] <- NA
  })
}

# Converti i risultati in dataframe
results_df <- data.frame(
  Cloud_Cover = as.numeric(names(area_results)),
  Area_m2 = unlist(area_results)
)

# Visualizza il dataframe finale
print(results_df)

# Salva i risultati su file CSV
write.csv(results_df, "area_per_cloud_cover.csv", row.names = FALSE)
