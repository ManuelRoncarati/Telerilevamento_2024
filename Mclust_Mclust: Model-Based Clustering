# Carica le librerie necessarie
library(terra)
library(mclust)

# Imposta la directory di lavoro
setwd("C:/esame/falsi colori sila")

# Carica l'immagine NIR
nir_1984 <- rast("NIR_PN_SILA_84.TIF")

# Converti l'immagine raster direttamente in un dataframe
# Converti l'immagine raster in un dataframe a lungo formato (long format)
nir_df <- as.data.frame(nir_1984, xy = TRUE)  # 'xy = TRUE' aggiunge le coordinate spaziali

# Rimuovi eventuali righe con NA
nir_df <- na.omit(nir_df)

# Impostazioni generali per il clustering
num_iterations <- 2
sample_size <- 828690
optimal_clusters_list <- numeric(num_iterations)

# Ciclo per eseguire il clustering con Gaussian Mixture Models (GMM)
for (i in 1:num_iterations) {
    set.seed(i)  # Cambia il seed ad ogni iterazione per la riproducibilità
    
    # Prendi un campione casuale di righe dal dataframe
    sample_indices <- sample(nrow(nir_df), sample_size)
    sample_df <- nir_df[sample_indices, ]
    
    # Applica Gaussian Mixture Models usando mclust
    gmm_model <- Mclust(sample_df[ , -c(1:2)])  # Escludi le colonne xy se presenti
    optimal_clusters_list[i] <- gmm_model$G
}

# Calcola la media del numero ottimale di cluster
mean_optimal_clusters <- mean(optimal_clusters_list)

# Visualizza la media del numero ottimale di cluster
cat("Numero medio ottimale di cluster secondo GMM:", mean_optimal_clusters, "\n")






















# Carica le librerie necessarie  INCREDIBILE AAHAHA 18.2 CON 50 ITERAZIONI E TUTTI I DATI , ma anche con nir il risultato è simile

library(terra)
library(mclust)

# Imposta la directory di lavoro
setwd("C:/esame/falsi colori sila")

# Carica l'immagine NIR
nir_1984 <- rast("NIR_PN_SILA_84.TIF")

# Converti l'immagine raster direttamente in un dataframe
# Converti l'immagine raster in un dataframe a lungo formato (long format)
nir_df <- as.data.frame(nir_1984, xy = TRUE)  # 'xy = TRUE' aggiunge le coordinate spaziali

# Rimuovi eventuali righe con NA
nir_df <- na.omit(nir_df)

# Impostazioni generali per il clustering
num_iterations <- 50
sample_size <- 828690
optimal_clusters_list <- numeric(num_iterations)

# Ciclo per eseguire il clustering con Gaussian Mixture Models (GMM)
for (i in 1:num_iterations) {
    set.seed(i)  # Cambia il seed ad ogni iterazione per la riproducibilità
    
    # Prendi un campione casuale di righe dal dataframe
    sample_indices <- sample(nrow(nir_df), sample_size)
    sample_df <- nir_df[sample_indices, ]
    
    # Applica Gaussian Mixture Models usando mclust
    gmm_model <- Mclust(sample_df[ , -c(1:2)], G = 1:25)  # Escludi le colonne xy se presenti
    optimal_clusters_list[i] <- gmm_model$G
}

# Calcola la media del numero ottimale di cluster
mean_optimal_clusters <- mean(optimal_clusters_list)

# Visualizza la media del numero ottimale di cluster
cat("Numero medio ottimale di cluster secondo GMM:", mean_optimal_clusters, "\n")








# Carica i pacchetti necessari  DOPO ALMENO 2 ORE, IL RISULTATO è DI 10 CLUSTER
library(terra)
library(raster)
library(sf)
library(RStoolbox)
library(viridis)
library(randomForest)
library(mclust)

# Imposta la directory di lavoro
setwd("C:/esame/falsi colori sila")

# Carica l'immagine raster
falsi_colori_1984 <- rast("falsi_colori_PN_SILA_84.TIF")

# Assegna le bande alle rispettive variabili
nir <- falsi_colori_1984[[1]]   # Prima banda: NIR
red <- falsi_colori_1984[[2]]   # Seconda banda: RED

# Calcola l'NDVI
ndvi <- (nir - red) / (nir + red)

# Campionamento casuale di 10.000 punti dal raster NDVI
ndvi_values <- values(ndvi, na.rm = TRUE) # Estrai i valori NDVI, ignorando i NA
sample_ndvi <- sample(ndvi_values, 828690, replace = TRUE) # Campiona 10.000 punti

# Applica il modello GMM utilizzando Mclust
bic_model <- Mclust(sample_ndvi, G = 1:35)

# Visualizza i risultati BIC
plot(bic_model, what = "BIC")

# Stampa il numero ottimale di cluster secondo il BIC
cat("Numero ottimale di cluster secondo BIC:", bic_model$G, "\n")











# Carica le librerie necessarie
library(terra)
library(mclust)

# Imposta la directory di lavoro
setwd("C:/esame/falsi colori sila")

# Carica l'immagine a 3 bande
falsi_colori_1984 <- rast("falsi_colori_PN_SILA_84.TIF")

# Assegna le bande alle rispettive variabili
nir <- falsi_colori_1984[[1]]   # Prima banda: NIR
red <- falsi_colori_1984[[2]]   # Seconda banda: RED

# Calcola l'NDVI
ndvi <- (nir - red) / (nir + red)

# Estrai i valori NDVI e crea una matrice
ndvi_values <- values(ndvi, na.rm = FALSE)  # Estrai i valori NDVI, includendo NA
ndvi_matrix <- matrix(ndvi_values, ncol = 1)  # Crea una matrice con una sola colonna

# Esegui il clustering GMM con 3 cluster
gmm_model <- Mclust(ndvi_matrix, G = 3)

# Predici i cluster per tutti i dati NDVI
cluster_assignments <- predict(gmm_model)$classification

# Gestisci i valori NA e assegna un valore predefinito ai cluster per le celle NA
cluster_assignments <- ifelse(is.na(ndvi_values), NA, cluster_assignments)

# Verifica la dimensione dell'immagine e dei cluster
n_cells <- ncell(ndvi)
num_values <- length(ndvi_values)
num_clusters_final <- length(cluster_assignments)

cat("Numero di celle nel raster:", n_cells, "\n")
cat("Numero di valori NDVI estratti:", num_values, "\n")
cat("Numero di valori di cluster:", num_clusters_final, "\n")

# Assicurati che il numero di valori di cluster corrisponda al numero di celle nel raster
if (num_values != n_cells) {
  # Crea un raster vuoto con le stesse dimensioni dell'immagine originale
  cluster_raster <- rast(ndvi)
  
  # Assegna i valori di cluster all'immagine
  values(cluster_raster) <- cluster_assignments
  
  # Visualizza l'immagine dei cluster
  plot(cluster_raster, main = "Cluster NDVI", col = c("red", "green", "blue", NA))
} else {
  stop("Il numero di valori NDVI estratti non corrisponde al numero di celle nel raster.")
}














# Carica le librerie necessarie
library(terra)
library(mclust)

# Imposta la directory di lavoro
setwd("C:/esame/falsi colori sila")

# Carica l'immagine a 3 bande
falsi_colori_1984 <- rast("falsi_colori_PN_SILA_84.TIF")

# Assegna le bande alle rispettive variabili
nir <- falsi_colori_1984[[1]]   # Prima banda: NIR
red <- falsi_colori_1984[[2]]   # Seconda banda: RED

# Calcola l'NDVI
ndvi <- (nir - red) / (nir + red)

# Estrai i valori NDVI e crea un DataFrame
ndvi_values <- values(ndvi, na.rm = TRUE)  # Estrai i valori NDVI, ignorando i NA
ndvi_df <- data.frame(NDVI = ndvi_values)  # Crea un DataFrame con una sola colonna

# Impostazione per il campionamento
sample_size <- 50000  # Dimensione del campione

# Prendi un campione casuale di righe dal dataframe
set.seed(123)  # Per la riproducibilità
sample_indices <- sample(nrow(ndvi_df), sample_size)
sample_df <- ndvi_df[sample_indices, ]

# Applica Gaussian Mixture Models usando mclust
gmm_model <- Mclust(sample_df, G=1:40)

# Visualizza il numero ottimale di cluster
cat("Il numero ottimale di cluster secondo GMM è:", gmm_model$G, "\n")

plot(gmm_model, what = "classification")
plot(gmm_model, what = "BIC", main = "BIC per Gaussian Mixture Models")

