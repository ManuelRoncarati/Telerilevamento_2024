library(rgee)

# Inizializza rgee
ee_Initialize()

# Definizione dell'AOI
aoi <- ee$FeatureCollection('projects/ee-roncaratimanuelciaooo/assets/stelvio')

# Funzione per applicare i fattori di scala
apply_scale_factors <- function(image) {
    optical_bands <- image$select('SR_B.')$multiply(0.0000275)$add(-0.2)
    thermal_bands <- image$select('ST_B.*')$multiply(0.00341802)$add(149.0)
    image$addBands(optical_bands, NULL, TRUE)$addBands(thermal_bands, NULL, TRUE)
}

# Funzione per calcolare l'area della composita filtrata e il numero di immagini (ottimizzata)
calculate_area_and_size <- function(cloud_cover, landsat_collection) {
    # Filtra la collezione in base alla copertura nuvolosa
    filtered <- landsat_collection$filter(ee$Filter$lt('CLOUD_COVER', cloud_cover))
    size <- filtered$size()$getInfo()
    
    if (size == 0) {
        return(list(area = NA, size = 0))
    }
    
    # Crea una composita media ritagliata
    composite <- filtered$mean()$clip(aoi)
    
    # Verifica se la composita ha bande valide
    band_names <- composite$bandNames()$getInfo()
    if (length(band_names) == 0) {
        return(list(area = NA, size = size))
    }
    
    # Calcola l'area dei pixel validi
    pixel_area <- ee$Image$pixelArea()
    valid_area <- composite$select(0)$gt(0)$multiply(pixel_area)$reduceRegion(
        reducer = ee$Reducer$sum(),
        geometry = aoi$geometry(),
        scale = 30,
        maxPixels = 1e13
    )
    
    # Ottieni il risultato della riduzione
    area_result <- valid_area$getInfo()
    
    # Controlla se la riduzione ha restituito un valore
    if (length(area_result) == 0) {
        return(list(area = NA, size = size))
    }
    
    # Estrai il primo valore dalla lista e restituisci i risultati
    area_value <- signif(unlist(area_result)[1] / 1e6, digits = 15)
    return(list(area = area_value, size = size))
}

# Sequenza di periodi di tempo da analizzare
periods <- list(
    c('1984-06-15', '1988-08-15'),
    c('1988-06-15', '1992-08-15'),
    c('1992-06-15', '1996-08-15'),
    c('1996-06-15', '2000-08-15'),
    c('2000-06-15', '2004-08-15'),
    c('2004-06-15', '2008-08-15'),
    c('2008-06-15', '2012-08-15'),
    c('2012-06-15', '2016-08-15'),
    c('2016-06-15', '2020-08-15'),
    c('2020-06-15', '2024-08-15')
)

# Lista per salvare i risultati di tutti i periodi
all_results <- list()
min_cloud_cover_results <- list()

# Itera su ogni periodo di tempo
for (period in periods) {
    start_date <- period[1]
    end_date <- period[2]
    
    # Collezione Landsat pre-filtrata per tempo e spazio
    if (as.Date(start_date) < as.Date('2012-06-15')) {
        landsat_base <- ee$ImageCollection('LANDSAT/LT05/C02/T1_L2')$
            filterBounds(aoi)$
            filter(ee$Filter$calendarRange(6, 8, 'month'))$ # Mesi di giugno e luglio
            filterDate(start_date, end_date)
    } else {
        landsat_base <- ee$ImageCollection('LANDSAT/LC08/C02/T1_L2')$
            filterBounds(aoi)$
            filter(ee$Filter$calendarRange(6, 8, 'month'))$ # Mesi di giugno e luglio
            filterDate(start_date, end_date)
    }
    
    # Applica i fattori di scala (una sola volta)
    landsat <- landsat_base$map(apply_scale_factors)
    
    # Variabile per salvare il valore minimo di copertura nuvolosa
    min_cloud_cover_with_same_area <- NA
    reference_area <- NA
    
    # Liste per salvare i risultati
    area_results <- list()
    size_results <- list()
    
    # Calcola l'area e il numero di immagini per ogni valore di copertura nuvolosa
    for (cloud_cover in seq(100, 1, by = -1)) {
        tryCatch({
            result <- calculate_area_and_size(cloud_cover, landsat)
            area <- result$area
            size <- result$size
            
            # Salva i risultati senza stampe inutili
            area_results[[as.character(cloud_cover)]] <- area
            size_results[[as.character(cloud_cover)]] <- size
            
            # Se è la prima iterazione, salva l'area di riferimento (per cloud_cover = 50%)
            if (cloud_cover == 50) {
                reference_area <- area
            }
            
            # Se l'area attuale è uguale a quella di riferimento, aggiorna il valore di copertura nuvolosa minimo
            if (!is.na(area) && abs(area - reference_area) < 0.001) {
                min_cloud_cover_with_same_area <- cloud_cover
            }
            
            # Se l'area non corrisponde più e abbiamo già trovato un valore minimo, fermiamo il ciclo
            if (!is.na(min_cloud_cover_with_same_area) && abs(area - reference_area) >= 0.001) {
                break
            }
            
        }, error = function(e) {
            area_results[[as.character(cloud_cover)]] <- NA
            size_results[[as.character(cloud_cover)]] <- NA
        })
    }
    
    # Salva i risultati per il periodo corrente
    results_df <- data.frame(
        Cloud_Cover = as.numeric(names(area_results)),
        Area_km2 = unlist(area_results),
        Numero_Immagini = unlist(size_results),
        Periodo = paste(start_date, end_date, sep = " - ")
    )
    results_df <- results_df[order(-results_df$Cloud_Cover), ]
    
    # Aggiungi i risultati alla lista di tutti i periodi
    all_results[[paste(start_date, end_date)]] <- results_df
    
    # Salva il valore minimo di copertura nuvolosa con la stessa area dell'N=50
    if (!is.na(min_cloud_cover_with_same_area)) {
        cat(sprintf("Periodo: %s - Valore minimo di copertura nuvolosa: %d%%\n", paste(start_date, end_date), min_cloud_cover_with_same_area))
        min_cloud_cover_results[[paste(start_date, end_date)]] <- data.frame(
            Periodo = paste(start_date, end_date, sep = " - "),
            Min_Cloud_Cover = min_cloud_cover_with_same_area,
            Area_km2 = reference_area,
            Numero_Immagini = size_results[[as.character(min_cloud_cover_with_same_area)]]
        )
    }
}

# Unisci tutti i risultati in un unico dataframe
final_results_df <- do.call(rbind, all_results)
min_cloud_cover_df <- do.call(rbind, min_cloud_cover_results)

# Salva i risultati su file CSV
tryCatch({
    write.csv(final_results_df, "all_area_per_cloud_cover_optimized.csv", row.names = FALSE)
    write.csv(min_cloud_cover_df, "min_cloud_cover_results.csv", row.names = FALSE)
}, error = function(e) {
    cat("Errore durante il salvataggio del file CSV: ", e$message, "\n")
})

# Visualizza i dataframe finali
print(final_results_df)
print(min_cloud_cover_df)




























// Definisci l'AOI dal tuo shapefile
var aoi = ee.FeatureCollection('projects/ee-roncaratimanuelciaooo/assets/stelvio');

// Lista dei periodi e valori di copertura nuvolosa minimi
var periods = [
  {start: '1984-06-15', end: '1988-08-15', cloudCover: 10},
  {start: '1988-06-15', end: '1992-08-15', cloudCover: 8},
  {start: '1992-06-15', end: '1996-08-15', cloudCover: 7},
  {start: '1996-06-15', end: '2000-08-15', cloudCover: 37},
  {start: '2000-06-15', end: '2004-08-15', cloudCover: 37},
  {start: '2004-06-15', end: '2008-08-15', cloudCover: 28},
  {start: '2008-06-15', end: '2012-08-15', cloudCover: 19},
  {start: '2012-06-15', end: '2016-08-15', cloudCover: 50},
  {start: '2016-06-15', end: '2020-08-15', cloudCover: 50},
  {start: '2020-06-15', end: '2024-08-15', cloudCover: 49}
];

// Funzione per applicare i fattori di scala
function applyScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
  return image.addBands(opticalBands, null, true)
      .addBands(thermalBands, null, true);
}

// Funzione di mascheratura delle nuvole
function maskSrClouds(image) {
  // Bit 0 - Fill
  // Bit 1 - Dilated Cloud
  // Bit 2 - Cirrus
  // Bit 3 - Cloud
  // Bit 4 - Cloud Shadow
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);

  return image.updateMask(qaMask)
      .updateMask(saturationMask);
}

// Parametri di visualizzazione Landsat 5
var visParamsL5 = {
  bands: ['SR_B3', 'SR_B2', 'SR_B1'], // Usa le bande corrispondenti per Landsat 5
  min: 0,
  max: 0.2
};

// Parametri di visualizzazione Landsat 8
var visParamsL8 = {
  bands: ['SR_B4', 'SR_B3', 'SR_B2'], // Usa le bande corrispondenti per Landsat 8
  min: 0,
  max: 0.2
};

// Itera su ogni periodo per creare compositi filtrati
periods.forEach(function(period) {
  var startDate = period.start;
  var endDate = period.end;
  var cloudCover = period.cloudCover;

  // Determina quale collezione Landsat utilizzare in base al periodo
  var landsatCollection;
  var visParams;
  var exportBands;

  if (startDate < '2012-06-15') {
    // Usa Landsat 5 per i periodi fino al 2012
    landsatCollection = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2');
    visParams = visParamsL5;
    exportBands = ['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7'];
  } else {
    // Usa Landsat 8 per i periodi dal 2012 in poi
    landsatCollection = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2');
    visParams = visParamsL8;
    exportBands = ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7'];
  }

  // Carica e filtra la collezione Landsat
  var landsat = landsatCollection
      .filterBounds(aoi)
      .filter(ee.Filter.calendarRange(6, 8, 'month')) // Filtra solo i mesi di giugno e luglio
      .filterDate(startDate, endDate);

  // Applica i fattori di scala
  landsat = landsat.map(applyScaleFactors);

  // Filtra in base alla copertura nuvolosa (CLOUD_COVER)
  var landsatFiltClouds = landsat
      .filter(ee.Filter.lessThan('CLOUD_COVER', cloudCover));

  // Crea un composite dalle immagini filtrate
  var compositeFiltClouds = landsatFiltClouds.median().clip(aoi);

  // Applica la maschera per le nuvole alla collezione
  var landsatFiltMasked = landsatFiltClouds.map(maskSrClouds);

  // Crea un composite mascherato
  var landsatCompositeMasked = landsatFiltMasked.median().clip(aoi);

  // Riempimento dei Valori Nulli
  var compositeMaskedSelected = landsatCompositeMasked.select(exportBands);
  var compositeFiltCloudsSelected = compositeFiltClouds.select(exportBands);

  // Usa unmask per riempire i valori nulli
  var compositeFilled = compositeMaskedSelected.unmask(compositeFiltCloudsSelected);
  Map.addLayer(compositeFilled, visParams, 'Composite Filled ' + startDate + ' to ' + endDate);

  // Esporta il risultato
  Export.image.toDrive({
    image: compositeFilled,
    description: 'Composite_Filled_Selected_' + startDate + '_' + endDate,
    folder: 'EarthEngineExports_stelvio_2', // Modifica con il nome della tua cartella Drive
    scale: 30, // Risoluzione in metri
    region: aoi.geometry(),
    maxPixels: 1e13
  });
});
