# Carica le librerie necessarie
check_and_install <- function(packages) {
    installed <- packages %in% rownames(installed.packages())
    if (any(!installed)) {
        install.packages(packages[!installed])
    }
    invisible(lapply(packages, library, character.only = TRUE))
}

required_packages <- c("fpc", "NbClust", "terra", "dplyr", "kohonen", "parallel", "leaflet", "ggplot2", "viridis")
check_and_install(required_packages)

# Imposta la working directory
setwd("D:/composite")

# Carica il raster multibanda
img_84 <- rast("L5 Composite 1984-1990_masked.tif")

# Seleziona le bande necessarie (B1, B2, B3, B4, B5, B7)
l1984 <- img_84[[c(1, 2, 3, 4, 5, 6)]]

# Calcola gli indici NDVI, MNDWI e NDBI
ndvi_1984 <- (l1984[[4]] - l1984[[3]]) / (l1984[[4]] + l1984[[3]])
mndwi_1984 <- (l1984[[2]] - l1984[[5]]) / (l1984[[2]] + l1984[[5]])
ndbi_1984 <- (l1984[[5]] - l1984[[4]]) / (l1984[[5]] + l1984[[4]])

# Crea lo stack con bande e indici
stack_1984 <- c(l1984, ndvi_1984, mndwi_1984, ndbi_1984)

# Estrai i valori dal raster stack come dataframe e rimuovi i valori NA
values_stack_1984 <- as.data.frame(values(stack_1984))
values_stack_1984_non_na <- values_stack_1984[complete.cases(values_stack_1984), ]

# PCA: esegui la PCA sullo stack e seleziona le prime due componenti principali
pca_result <- prcomp(values_stack_1984_non_na, center = TRUE, scale. = TRUE)
pca_values <- pca_result$x[, 1:3]  # Seleziona solo le prime due componenti

# Conta il numero di osservazioni valide
n <- nrow(pca_values)
print(paste("Numero di osservazioni valide:", n))
# [1] "Numero di osservazioni valide: 1069509"

# Calcola il numero totale di neuroni suggerito dalla formula
neurons <- 5 * sqrt(n)
print(paste("Numero suggerito di neuroni:", round(neurons)))
# [1] "Numero suggerito di neuroni: 5171"

# Suggerisci una configurazione di griglia approssimata
x_dim <- round(sqrt(neurons))
y_dim <- round(neurons / x_dim)
print(paste("Dimensioni della griglia suggerite:", x_dim, "x", y_dim))
# [1] "Dimensioni della griglia suggerite: 72 x 72"

# Definisci una griglia SOM con le dimensioni calcolate
som_grid <- somgrid(xdim = x_dim, ydim = y_dim, topo = "hexagonal")

# Esegui SuperSOM con parallelizzazione usando la PCA come input e alpha = 0
som_model <- supersom(
    list(pca_values), 
    grid = som_grid, 
    rlen = 500, 
    alpha = 0,                  # Imposta alpha a 0 per non avere apprendimento progressivo
    radius = quantile(dist(som_grid$pts), 2/3), 
    mode = "pbatch", 
    cores = -1  # Usa tutti i core disponibili
)

# Visualizza i cambiamenti durante l'addestramento della SOM
plot(som_model, type = "changes")

# Ottieni i codici della SOM (valori ridotti dimensionalmente)
som_values <- som_model$codes[[1]]

# Determina il numero ottimale di cluster con NbClust
library(NbClust)

set.seed(123)  # Per riproducibilità
nbclust_result <- NbClust(
    data = som_values, 
    diss = NULL, 
    distance = "euclidean",  # Distanza euclidea
    min.nc = 2,              # Numero minimo di cluster
    max.nc = 10,             # Numero massimo di cluster
    method = "kmeans",       # Metodo di clustering K-means
    index = "all"            # Usa tutti i criteri di validazione
)

# **Risultati di NbClust**:
# La maggior parte dei criteri (11 su 23) ha indicato che il numero ottimale di cluster è 5.

# Trova il numero ottimale di cluster dalla moda dei risultati
optimal_clusters <- as.numeric(names(which.max(table(nbclust_result$Best.nc[1, ]))))

# Stampa il numero ottimale di cluster
cat("Il numero ottimale di cluster secondo NbClust è:", optimal_clusters, "\n")
# Il numero ottimale di cluster secondo NbClust è: 5

# Usa il numero ottimale di cluster con clusterboot e kmeansCBI
library(fpc)

clusterboot_result <- clusterboot(
    data = som_values,            # Usa i valori SOM
    B = 500,                      # Numero di campioni bootstrap
    clustermethod = kmeansCBI,    # Metodo K-means tramite interfaccia kmeansCBI
    bootmethod = "boot",          # Usa bootstrap non parametrico
    dissolution = 0.5,            # Valore di dissoluzione per i cluster instabili
    recover = 0.75,               # Valore di recupero per i cluster stabili
    count = FALSE,                # Mostra il progresso durante il bootstrap
    k = optimal_clusters          # Usa il numero ottimale di cluster trovato con NbClust
)

# Stampa i risultati della stabilità dei cluster
cat("Risultati della stabilità dei cluster con clusterboot:\n")
# Risultati della stabilità dei cluster con clusterboot:

print(clusterboot_result$bootmean)    # Media della stabilità per ogni cluster
# [1] 0.9606279 0.8999107 0.8846796 0.9088574 0.9564157

print(clusterboot_result$bootrecover) # Numero di volte che ogni cluster è stato recuperato
# [1] 498 438 438 445 463

print(clusterboot_result$bootbrd)     # Numero di volte che ogni cluster è stato dissolto
# [1]  0 35 60 22  0

# Visualizzazione della stabilità
barplot(clusterboot_result$bootmean, 
        main = "Stabilità dei Cluster con K-means e Bootstrap", 
        ylab = "Media della Similarità di Jaccard", 
        xlab = "Cluster", 
        col = "lightblue")


#ora visualizziamo la clusterizzazione con kemeans e il numero di cluster ritenuto ottimale

# Esegui K-means con 5 cluster e gestisci le iterazioni
set.seed(42)  # Imposta il seme per garantire la riproducibilità
kmeans_nbclust <- kmeans(som_values, centers = 5, nstart = 100, iter.max = 1000)

# Crea un raster classificato usando i cluster di K-means con 5 cluster
classified_raster_nbclust <- rast(img_84)
values(classified_raster_nbclust) <- NA
mask <- !is.na(values(img_84[[1]]))  # Crea una maschera dai valori non NA del raster originale
values(classified_raster_nbclust)[mask] <- kmeans_nbclust$cluster[som_model$unit.classif]

# Seleziona solo la prima banda del raster per evitare messaggi di avvertimento
classified_raster_nbclust_single <- classified_raster_nbclust[[1]]

# Carica la palette turbo
palette_turbo <- viridisLite::turbo

# Visualizza il raster classificato con leaflet
leaflet() %>%
  # Aggiungi le tiles di base
  addTiles(group = "OpenStreetMap") %>%
  addProviderTiles("Esri.WorldImagery", group = "Immagine Satellitare") %>%
  addProviderTiles("CartoDB.Positron", group = "Mappa Chiara") %>%
  
  # Aggiungi il raster classificato con 5 cluster
  addRasterImage(classified_raster_nbclust_single, 
                 colors = palette_turbo(5), 
                 opacity = 0.6, 
                 group = "Classificato con K-means (5 Cluster)") %>%
  
  # Aggiungi i controlli per cambiare i layer di base e i gruppi di layer
  addLayersControl(
    baseGroups = c("OpenStreetMap", "Immagine Satellitare", "Mappa Chiara"),  # Layer di base
    overlayGroups = c("Classificato con K-means (5 Cluster)"),  # Layer classificati
    options = layersControlOptions(collapsed = FALSE)  # Espandi il menu dei layer di default
  ) %>%
  
  # Aggiungi una barra di scala
  addScaleBar(position = "bottomright", options = scaleBarOptions(imperial = FALSE)) %>%
  
  # Centra la mappa sul raster (modifica i valori per il tuo AOI)
  setView(lng = 16.5, lat = 39.0, zoom = 10)

cat("Visualizzazione completata con successo.\n")























# Carica le librerie necessarie
library(terra)
library(leaflet)
library(leafem)
library(raster)
library(OpenImageR)
library(SuperpixelImageSegmentation)

# Imposta la working directory
setwd("C:/composite")

# Carica il raster multibanda
img_84 <- rast("ritaglio.tif")

# Seleziona le bande necessarie (B1, B2, B3, B4, B5, B7)
l1984 <- img_84[[c(1, 2, 3, 4, 5, 6)]]

# Riduci il numero di bande a 3 per evitare problemi di dimensionalità
l1984_reduced <- l1984[[1:3]]

# Crea una maschera per i valori non NA
valid_mask <- !is.na(l1984_reduced[[1]]) & !is.na(l1984_reduced[[2]]) & !is.na(l1984_reduced[[3]])

# Applica la maschera per ottenere solo i valori non NA
l1984_reduced_non_na <- mask(l1984_reduced, valid_mask, maskvalue = FALSE)

# Converti il raster ridotto in un RasterBrick per leaflet
rgb_image_raster <- brick(l1984_reduced_non_na)

# Converti l'immagine in array per OpenImageR
pca_rgb_array <- as.array(l1984_reduced_non_na)

# Normalizza i valori dell'immagine tra 0 e 255
pca_rgb_array <- pca_rgb_array * 255 / max(pca_rgb_array, na.rm = TRUE)

# Inizializza l'oggetto Image_Segmentation
init <- Image_Segmentation$new()

# Esegui la segmentazione dei superpixel con Affinity Propagation e SLIC (SLICAP)
spx <- init$spixel_segmentation(
    method = "slic",
    input_image = pca_rgb_array,
    superpixel = 1000,
    AP_data = TRUE,
    use_median = TRUE,
    sim_wL = 3,
    sim_wA = 10,
    sim_wB = 10,
    sim_color_radius = 10,
    kmeans_method = "kmeans",
    kmeans_initializer = "kmeans++",
    kmeans_num_init = 3,
    kmeans_max_iters = 100,
    colour_type = "LAB",
    verbose = TRUE
)

# Visualizza la struttura dell'output spx
str(spx)

# Applica la maschera di valori validi all'immagine segmentata KMeans
if (!is.null(spx$KMeans_image_data)) {
    kmeans_rgb_array <- spx$KMeans_image_data
    kmeans_rgb_array[!as.array(valid_mask)] <- NA  # Imposta i valori non validi a NA per la trasparenza
    kmeans_raster_1 <- raster(as.matrix(kmeans_rgb_array[,,1]))
    kmeans_raster_2 <- raster(as.matrix(kmeans_rgb_array[,,2]))
    kmeans_raster_3 <- raster(as.matrix(kmeans_rgb_array[,,3]))
    kmeans_rgb_image_raster <- brick(kmeans_raster_1, kmeans_raster_2, kmeans_raster_3)
    crs(kmeans_rgb_image_raster) <- crs(l1984_reduced_non_na)
    extent(kmeans_rgb_image_raster) <- extent(rgb_image_raster)
    leaflet_map <- leaflet() %>%
        addProviderTiles(providers$Esri.WorldImagery, group = "Esri World Imagery") %>%
        addProviderTiles(providers$CartoDB.Positron, group = "CartoDB Positron") %>%
        addProviderTiles(providers$OpenStreetMap, group = "OpenStreetMap") %>%
        addRasterRGB(
            rgb_image_raster,
            r = 1, g = 2, b = 3,
            group = "Original RGB",
            options = tileOptions(opacity = 0.7, minZoom = 1, maxZoom = 18)
        ) %>%
        addRasterRGB(
            kmeans_rgb_image_raster,
            r = 1, g = 2, b = 3,
            group = "KMeans RGB",
            options = tileOptions(opacity = 0.7, minZoom = 1, maxZoom = 18)
        ) %>%
        addLayersControl(
            baseGroups = c("Esri World Imagery", "CartoDB Positron", "OpenStreetMap"),
            overlayGroups = c("Original RGB", "KMeans RGB"),
            options = layersControlOptions(collapsed = FALSE)
        )
}

leaflet_map
